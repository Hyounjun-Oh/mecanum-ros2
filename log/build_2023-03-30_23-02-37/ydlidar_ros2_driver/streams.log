[0.186s] Invoking command in '/home/jetson/mecanum-ros2/build/ydlidar_ros2_driver': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/jetson/mecanum-ros2/install/teleop_keyboard:/home/jetson/mecanum-ros2/install/motor_control:/home/jetson/mecanum-ros2/install/mobile_description:/home/jetson/mecanum-ros2/install/mecanum_odometry:/opt/ros/galactic /usr/bin/cmake /home/jetson/mecanum-ros2/src/ydlidar_ros2_driver -DCMAKE_INSTALL_PREFIX=/home/jetson/mecanum-ros2/install/ydlidar_ros2_driver
[0.648s] -- The C compiler identification is GNU 8.4.0
[0.864s] -- The CXX compiler identification is GNU 8.4.0
[0.894s] -- Check for working C compiler: /usr/bin/cc
[1.147s] -- Check for working C compiler: /usr/bin/cc -- works
[1.156s] -- Detecting C compiler ABI info
[1.402s] -- Detecting C compiler ABI info - done
[1.454s] -- Detecting C compile features
[1.456s] -- Detecting C compile features - done
[1.468s] -- Check for working CXX compiler: /usr/bin/c++
[1.745s] -- Check for working CXX compiler: /usr/bin/c++ -- works
[1.748s] -- Detecting CXX compiler ABI info
[2.042s] -- Detecting CXX compiler ABI info - done
[2.098s] -- Detecting CXX compile features
[2.099s] -- Detecting CXX compile features - done
[2.117s] -- Found ament_cmake: 1.1.6 (/opt/ros/galactic/share/ament_cmake/cmake)
[2.250s] -- Found PythonInterp: /usr/bin/python3 (found suitable version "3.8.10", minimum required is "3") 
[2.251s] -- Using PYTHON_EXECUTABLE: /usr/bin/python3
[2.729s] -- Found rclcpp: 9.2.2 (/opt/ros/galactic/share/rclcpp/cmake)
[2.996s] -- Using all available rosidl_typesupport_c: rosidl_typesupport_fastrtps_c;rosidl_typesupport_introspection_c
[3.040s] -- Found rosidl_adapter: 2.2.3 (/opt/ros/galactic/share/rosidl_adapter/cmake)
[3.426s] -- Found OpenSSL: /usr/lib/aarch64-linux-gnu/libcrypto.so (found version "1.1.1f")  
[3.541s] -- Found FastRTPS: /opt/ros/galactic/include  
[3.926s] -- Using all available rosidl_typesupport_cpp: rosidl_typesupport_fastrtps_cpp;rosidl_typesupport_introspection_cpp
[4.221s] -- Found rmw_implementation_cmake: 3.3.1 (/opt/ros/galactic/share/rmw_implementation_cmake/cmake)
[4.238s] -- Found rmw_cyclonedds_cpp: 0.22.6 (/opt/ros/galactic/share/rmw_cyclonedds_cpp/cmake)
[4.328s] -- Using RMW implementation 'rmw_cyclonedds_cpp' as default
[4.331s] -- Looking for pthread.h
[4.602s] -- Looking for pthread.h - found
[4.603s] -- Performing Test CMAKE_HAVE_LIBC_PTHREAD
[4.854s] -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
[4.855s] -- Looking for pthread_create in pthreads
[5.061s] -- Looking for pthread_create in pthreads - not found
[5.062s] -- Looking for pthread_create in pthread
[5.308s] -- Looking for pthread_create in pthread - found
[5.312s] -- Found Threads: TRUE  
[6.049s] -- Found sensor_msgs: 2.2.4 (/opt/ros/galactic/share/sensor_msgs/cmake)
[6.569s] -- Found visualization_msgs: 2.2.4 (/opt/ros/galactic/share/visualization_msgs/cmake)
[6.895s] -- Found std_srvs: 2.2.4 (/opt/ros/galactic/share/std_srvs/cmake)
[6.970s] -- Found ament_lint_auto: 0.10.7 (/opt/ros/galactic/share/ament_lint_auto/cmake)
[7.346s] -- Added test 'copyright' to check source files copyright and LICENSE
[7.354s] -- Added test 'cppcheck' to perform static code analysis on C / C++ code
[7.356s] -- Configured cppcheck include dirs: /home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src
[7.356s] -- Configured cppcheck exclude dirs and/or files: 
[7.363s] -- Added test 'cpplint' to check C / C++ code against the Google style
[7.364s] -- Configured cpplint exclude dirs and/or files: 
[7.366s] -- Added test 'flake8' to check Python code syntax and style conventions
[7.369s] -- Added test 'lint_cmake' to check CMake code style
[7.372s] -- Added test 'pep257' to check Python code against some of the style conventions in PEP 257
[7.379s] -- Added test 'uncrustify' to check C / C++ code style
[7.379s] -- Configured uncrustify additional arguments: 
[7.382s] -- Added test 'xmllint' to check XML markup files
[7.399s] -- Configuring done
[7.457s] -- Generating done
[7.463s] -- Build files have been written to: /home/jetson/mecanum-ros2/build/ydlidar_ros2_driver
[7.496s] Invoked command in '/home/jetson/mecanum-ros2/build/ydlidar_ros2_driver' returned '0': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/jetson/mecanum-ros2/install/teleop_keyboard:/home/jetson/mecanum-ros2/install/motor_control:/home/jetson/mecanum-ros2/install/mobile_description:/home/jetson/mecanum-ros2/install/mecanum_odometry:/opt/ros/galactic /usr/bin/cmake /home/jetson/mecanum-ros2/src/ydlidar_ros2_driver -DCMAKE_INSTALL_PREFIX=/home/jetson/mecanum-ros2/install/ydlidar_ros2_driver
[7.505s] Invoking command in '/home/jetson/mecanum-ros2/build/ydlidar_ros2_driver': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/jetson/mecanum-ros2/install/teleop_keyboard:/home/jetson/mecanum-ros2/install/motor_control:/home/jetson/mecanum-ros2/install/mobile_description:/home/jetson/mecanum-ros2/install/mecanum_odometry:/opt/ros/galactic /usr/bin/cmake --build /home/jetson/mecanum-ros2/build/ydlidar_ros2_driver -- -j4 -l4
[7.652s] [35m[1mScanning dependencies of target ydlidar_ros2_driver_client[0m
[7.652s] [35m[1mScanning dependencies of target ydlidar_ros2_driver_node[0m
[7.818s] [ 50%] [32mBuilding CXX object CMakeFiles/ydlidar_ros2_driver_node.dir/src/ydlidar_ros2_driver_node.cpp.o[0m
[7.819s] [ 50%] [32mBuilding CXX object CMakeFiles/ydlidar_ros2_driver_client.dir/src/ydlidar_ros2_driver_client.cpp.o[0m
[14.094s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In function â€˜[01m[Kint main(int, char**)[m[Kâ€™:
[14.095s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:44:33:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.095s] If you want to declare a parameter that won't change type without a default value use:
[14.097s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.097s] 
[14.098s] If you want to declare a parameter that can dynamically change type use:
[14.100s] ```
[14.101s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.102s] descriptor.dynamic_typing = true;
[14.103s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.105s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.110s]    node->declare_parameter("port"[01;35m[K)[m[K;
[14.113s]                                  [01;35m[K^[m[K
[14.113s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.114s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.114s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.115s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.115s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.116s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.116s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.116s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:51:41:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.117s] If you want to declare a parameter that won't change type without a default value use:
[14.117s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.118s] 
[14.118s] If you want to declare a parameter that can dynamically change type use:
[14.119s] ```
[14.119s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.120s] descriptor.dynamic_typing = true;
[14.120s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.120s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.121s]    node->declare_parameter("ignore_array"[01;35m[K)[m[K;
[14.121s]                                          [01;35m[K^[m[K
[14.122s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.122s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.123s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.123s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.124s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.124s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.125s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.125s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:56:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.125s] If you want to declare a parameter that won't change type without a default value use:
[14.126s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.126s] 
[14.127s] If you want to declare a parameter that can dynamically change type use:
[14.127s] ```
[14.128s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.128s] descriptor.dynamic_typing = true;
[14.128s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.129s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.129s]    node->declare_parameter("frame_id"[01;35m[K)[m[K;
[14.130s]                                      [01;35m[K^[m[K
[14.130s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.131s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.131s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.132s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.132s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.132s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.133s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.133s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:62:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.134s] If you want to declare a parameter that won't change type without a default value use:
[14.134s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.135s] 
[14.135s] If you want to declare a parameter that can dynamically change type use:
[14.136s] ```
[14.136s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.136s] descriptor.dynamic_typing = true;
[14.137s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.137s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.138s]    node->declare_parameter("baudrate"[01;35m[K)[m[K;
[14.138s]                                      [01;35m[K^[m[K
[14.139s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.139s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.140s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.140s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.141s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.142s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.142s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.143s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:67:39:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.143s] If you want to declare a parameter that won't change type without a default value use:
[14.144s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.144s] 
[14.145s] If you want to declare a parameter that can dynamically change type use:
[14.145s] ```
[14.146s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.146s] descriptor.dynamic_typing = true;
[14.147s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.147s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.148s]    node->declare_parameter("lidar_type"[01;35m[K)[m[K;
[14.148s]                                        [01;35m[K^[m[K
[14.149s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.149s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.150s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.150s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.151s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.151s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.151s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.152s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:72:40:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.152s] If you want to declare a parameter that won't change type without a default value use:
[14.153s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.153s] 
[14.154s] If you want to declare a parameter that can dynamically change type use:
[14.154s] ```
[14.155s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.155s] descriptor.dynamic_typing = true;
[14.155s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.156s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.156s]    node->declare_parameter("device_type"[01;35m[K)[m[K;
[14.157s]                                         [01;35m[K^[m[K
[14.157s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.157s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.158s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.158s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.159s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.159s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.160s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.160s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:77:40:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.160s] If you want to declare a parameter that won't change type without a default value use:
[14.161s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.161s] 
[14.162s] If you want to declare a parameter that can dynamically change type use:
[14.162s] ```
[14.163s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.163s] descriptor.dynamic_typing = true;
[14.163s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.164s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.164s]    node->declare_parameter("sample_rate"[01;35m[K)[m[K;
[14.165s]                                         [01;35m[K^[m[K
[14.165s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.166s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.166s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.167s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.167s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.168s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.168s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.168s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:82:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.169s] If you want to declare a parameter that won't change type without a default value use:
[14.169s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.170s] 
[14.170s] If you want to declare a parameter that can dynamically change type use:
[14.171s] ```
[14.171s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.172s] descriptor.dynamic_typing = true;
[14.172s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.172s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.173s]    node->declare_parameter("abnormal_check_count"[01;35m[K)[m[K;
[14.173s]                                                  [01;35m[K^[m[K
[14.174s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.174s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.175s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.175s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.175s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.176s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.176s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.177s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:90:45:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.177s] If you want to declare a parameter that won't change type without a default value use:
[14.178s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.178s] 
[14.179s] If you want to declare a parameter that can dynamically change type use:
[14.179s] ```
[14.179s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.180s] descriptor.dynamic_typing = true;
[14.180s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.181s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.181s]    node->declare_parameter("fixed_resolution"[01;35m[K)[m[K;
[14.181s]                                              [01;35m[K^[m[K
[14.182s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.182s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.183s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.183s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.184s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.184s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.184s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.185s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:95:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.185s] If you want to declare a parameter that won't change type without a default value use:
[14.186s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.186s] 
[14.187s] If you want to declare a parameter that can dynamically change type use:
[14.187s] ```
[14.188s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.188s] descriptor.dynamic_typing = true;
[14.188s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.189s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.189s]    node->declare_parameter("reversion"[01;35m[K)[m[K;
[14.190s]                                       [01;35m[K^[m[K
[14.190s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.191s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.191s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.191s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.192s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.192s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.193s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.193s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:100:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.194s] If you want to declare a parameter that won't change type without a default value use:
[14.194s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.195s] 
[14.195s] If you want to declare a parameter that can dynamically change type use:
[14.195s] ```
[14.196s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.196s] descriptor.dynamic_typing = true;
[14.197s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.197s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.197s]    node->declare_parameter("inverted"[01;35m[K)[m[K;
[14.198s]                                      [01;35m[K^[m[K
[14.198s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.199s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.199s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.200s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.200s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.200s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.201s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.201s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:104:43:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.202s] If you want to declare a parameter that won't change type without a default value use:
[14.202s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.203s] 
[14.203s] If you want to declare a parameter that can dynamically change type use:
[14.204s] ```
[14.204s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.204s] descriptor.dynamic_typing = true;
[14.205s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.205s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.206s]    node->declare_parameter("auto_reconnect"[01;35m[K)[m[K;
[14.206s]                                            [01;35m[K^[m[K
[14.207s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.207s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.207s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.208s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.208s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.209s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.209s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.210s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:109:44:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.210s] If you want to declare a parameter that won't change type without a default value use:
[14.210s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.211s] 
[14.211s] If you want to declare a parameter that can dynamically change type use:
[14.212s] ```
[14.213s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.213s] descriptor.dynamic_typing = true;
[14.214s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.214s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.214s]    node->declare_parameter("isSingleChannel"[01;35m[K)[m[K;
[14.215s]                                             [01;35m[K^[m[K
[14.215s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.216s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.216s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.217s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.217s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.218s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.218s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.218s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:114:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.219s] If you want to declare a parameter that won't change type without a default value use:
[14.219s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.220s] 
[14.220s] If you want to declare a parameter that can dynamically change type use:
[14.221s] ```
[14.221s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.222s] descriptor.dynamic_typing = true;
[14.222s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.222s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.223s]    node->declare_parameter("intensity"[01;35m[K)[m[K;
[14.223s]                                       [01;35m[K^[m[K
[14.224s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.224s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.225s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.225s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.226s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.226s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.226s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.227s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:119:46:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.227s] If you want to declare a parameter that won't change type without a default value use:
[14.228s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.228s] 
[14.229s] If you want to declare a parameter that can dynamically change type use:
[14.229s] ```
[14.230s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.230s] descriptor.dynamic_typing = true;
[14.230s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.231s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.231s]    node->declare_parameter("support_motor_dtr"[01;35m[K)[m[K;
[14.232s]                                               [01;35m[K^[m[K
[14.232s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.233s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.233s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.234s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.234s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.234s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.235s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.235s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:126:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.236s] If you want to declare a parameter that won't change type without a default value use:
[14.236s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.237s] 
[14.237s] If you want to declare a parameter that can dynamically change type use:
[14.238s] ```
[14.238s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.239s] descriptor.dynamic_typing = true;
[14.239s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.240s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.241s]    node->declare_parameter("angle_max"[01;35m[K)[m[K;
[14.241s]                                       [01;35m[K^[m[K
[14.242s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.242s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.243s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.244s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.244s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.245s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.245s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.246s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:130:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.246s] If you want to declare a parameter that won't change type without a default value use:
[14.247s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.247s] 
[14.248s] If you want to declare a parameter that can dynamically change type use:
[14.248s] ```
[14.249s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.249s] descriptor.dynamic_typing = true;
[14.249s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.250s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.250s]    node->declare_parameter("angle_min"[01;35m[K)[m[K;
[14.251s]                                       [01;35m[K^[m[K
[14.251s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.252s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.252s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.253s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.253s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.254s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.254s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.254s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:135:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.255s] If you want to declare a parameter that won't change type without a default value use:
[14.255s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.256s] 
[14.256s] If you want to declare a parameter that can dynamically change type use:
[14.256s] ```
[14.257s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.257s] descriptor.dynamic_typing = true;
[14.258s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.258s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.259s]    node->declare_parameter("range_max"[01;35m[K)[m[K;
[14.259s]                                       [01;35m[K^[m[K
[14.259s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.260s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.260s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.261s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.261s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.261s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.262s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.262s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:139:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.263s] If you want to declare a parameter that won't change type without a default value use:
[14.263s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.264s] 
[14.264s] If you want to declare a parameter that can dynamically change type use:
[14.264s] ```
[14.265s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.265s] descriptor.dynamic_typing = true;
[14.266s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.266s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.267s]    node->declare_parameter("range_min"[01;35m[K)[m[K;
[14.267s]                                       [01;35m[K^[m[K
[14.267s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.268s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.268s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.269s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.269s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.270s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.270s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.270s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:144:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.271s] If you want to declare a parameter that won't change type without a default value use:
[14.271s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.272s] 
[14.272s] If you want to declare a parameter that can dynamically change type use:
[14.272s] ```
[14.273s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.273s] descriptor.dynamic_typing = true;
[14.274s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.274s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.275s]    node->declare_parameter("frequency"[01;35m[K)[m[K;
[14.275s]                                       [01;35m[K^[m[K
[14.275s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.276s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.276s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.277s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.277s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.278s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.278s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.278s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:149:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[14.279s] If you want to declare a parameter that won't change type without a default value use:
[14.279s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[14.280s] 
[14.280s] If you want to declare a parameter that can dynamically change type use:
[14.281s] ```
[14.281s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[14.281s] descriptor.dynamic_typing = true;
[14.282s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[14.282s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[14.283s]    node->declare_parameter("invalid_range_is_inf"[01;35m[K)[m[K;
[14.283s]                                                  [01;35m[K^[m[K
[14.284s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[14.284s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[14.284s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[14.285s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[14.285s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[14.286s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[14.286s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[14.287s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In lambda function:
[14.287s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:163:54:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Krequest_header[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[14.287s]      [&laser]([01;35m[Kconst std::shared_ptr<rmw_request_id_t> request_header[m[K,
[14.288s]               [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~[m[K
[14.288s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:164:56:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kreq[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[14.289s]    [01;35m[Kconst std::shared_ptr<std_srvs::srv::Empty::Request> req[m[K,
[14.289s]    [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~[m[K
[14.290s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:165:51:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kresponse[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[14.290s]    [01;35m[Kstd::shared_ptr<std_srvs::srv::Empty::Response> response[m[K) -> bool
[14.291s]    [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~[m[K
[14.291s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In lambda function:
[14.291s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:173:54:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Krequest_header[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[14.292s]      [&laser]([01;35m[Kconst std::shared_ptr<rmw_request_id_t> request_header[m[K,
[14.292s]               [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~[m[K
[14.293s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:174:56:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kreq[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[14.293s]    [01;35m[Kconst std::shared_ptr<std_srvs::srv::Empty::Request> req[m[K,
[14.294s]    [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~[m[K
[14.294s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:175:51:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kresponse[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[14.294s]    [01;35m[Kstd::shared_ptr<std_srvs::srv::Empty::Response> response[m[K) -> bool
[14.295s]    [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~[m[K
[23.928s] [ 75%] [32m[1mLinking CXX executable ydlidar_ros2_driver_node[0m
[25.164s] [ 75%] Built target ydlidar_ros2_driver_node
[32.103s] [100%] [32m[1mLinking CXX executable ydlidar_ros2_driver_client[0m
[33.506s] [100%] Built target ydlidar_ros2_driver_client
[33.544s] Invoked command in '/home/jetson/mecanum-ros2/build/ydlidar_ros2_driver' returned '0': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/jetson/mecanum-ros2/install/teleop_keyboard:/home/jetson/mecanum-ros2/install/motor_control:/home/jetson/mecanum-ros2/install/mobile_description:/home/jetson/mecanum-ros2/install/mecanum_odometry:/opt/ros/galactic /usr/bin/cmake --build /home/jetson/mecanum-ros2/build/ydlidar_ros2_driver -- -j4 -l4
[33.638s] Invoking command in '/home/jetson/mecanum-ros2/build/ydlidar_ros2_driver': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/jetson/mecanum-ros2/install/teleop_keyboard:/home/jetson/mecanum-ros2/install/motor_control:/home/jetson/mecanum-ros2/install/mobile_description:/home/jetson/mecanum-ros2/install/mecanum_odometry:/opt/ros/galactic /usr/bin/cmake --install /home/jetson/mecanum-ros2/build/ydlidar_ros2_driver
[33.675s] -- Install configuration: ""
[33.676s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/lib/ydlidar_ros2_driver/ydlidar_ros2_driver_node
[33.683s] -- Set runtime path of "/home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/lib/ydlidar_ros2_driver/ydlidar_ros2_driver_node" to ""
[33.684s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/lib/ydlidar_ros2_driver/ydlidar_ros2_driver_client
[33.695s] -- Set runtime path of "/home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/lib/ydlidar_ros2_driver/ydlidar_ros2_driver_client" to ""
[33.695s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/launch
[33.696s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/launch/ydlidar.py
[33.696s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/launch/ydlidar_launch.py
[33.697s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/launch/ydlidar_launch_view.py
[33.697s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/params
[33.698s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/params/ydlidar.yaml
[33.698s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/startup
[33.699s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/startup/initenv.sh
[33.699s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/config
[33.699s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/config/ydlidar.rviz
[33.700s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ament_index/resource_index/package_run_dependencies/ydlidar_ros2_driver
[33.700s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ament_index/resource_index/parent_prefix_path/ydlidar_ros2_driver
[33.700s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/environment/ament_prefix_path.sh
[33.701s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/environment/ament_prefix_path.dsv
[33.701s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/environment/path.sh
[33.702s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/environment/path.dsv
[33.703s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/local_setup.bash
[33.703s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/local_setup.sh
[33.704s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/local_setup.zsh
[33.704s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/local_setup.dsv
[33.705s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/package.dsv
[33.706s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ament_index/resource_index/packages/ydlidar_ros2_driver
[33.706s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/cmake/ydlidar_ros2_driverConfig.cmake
[33.707s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/cmake/ydlidar_ros2_driverConfig-version.cmake
[33.707s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/package.xml
[33.724s] Invoked command in '/home/jetson/mecanum-ros2/build/ydlidar_ros2_driver' returned '0': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/jetson/mecanum-ros2/install/teleop_keyboard:/home/jetson/mecanum-ros2/install/motor_control:/home/jetson/mecanum-ros2/install/mobile_description:/home/jetson/mecanum-ros2/install/mecanum_odometry:/opt/ros/galactic /usr/bin/cmake --install /home/jetson/mecanum-ros2/build/ydlidar_ros2_driver
