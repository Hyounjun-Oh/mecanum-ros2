[0.669s] Invoking command in '/home/ohj/mecanum-ros2/build/ydlidar_ros2_driver': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/ohj/mecanum-ros2/install/teleop_keyboard:/home/ohj/mecanum-ros2/install/motor_control:/home/ohj/mecanum-ros2/install/mobile_description:/home/ohj/mecanum-ros2/install/mecanum_odometry:/opt/ros/galactic /usr/bin/cmake /home/ohj/mecanum-ros2/src/ydlidar_ros2_driver -DCMAKE_INSTALL_PREFIX=/home/ohj/mecanum-ros2/install/ydlidar_ros2_driver
[0.702s] -- The C compiler identification is GNU 9.4.0
[0.739s] -- The CXX compiler identification is GNU 9.4.0
[0.742s] -- Check for working C compiler: /usr/bin/cc
[0.799s] -- Check for working C compiler: /usr/bin/cc -- works
[0.800s] -- Detecting C compiler ABI info
[0.847s] -- Detecting C compiler ABI info - done
[0.860s] -- Detecting C compile features
[0.860s] -- Detecting C compile features - done
[0.861s] -- Check for working CXX compiler: /usr/bin/c++
[0.934s] -- Check for working CXX compiler: /usr/bin/c++ -- works
[0.935s] -- Detecting CXX compiler ABI info
[1.008s] -- Detecting CXX compiler ABI info - done
[1.015s] -- Detecting CXX compile features
[1.015s] -- Detecting CXX compile features - done
[1.017s] -- Found ament_cmake: 1.1.6 (/opt/ros/galactic/share/ament_cmake/cmake)
[1.035s] -- Found PythonInterp: /usr/bin/python3 (found suitable version "3.8.10", minimum required is "3") 
[1.036s] -- Using PYTHON_EXECUTABLE: /usr/bin/python3
[1.096s] -- Found rclcpp: 9.2.2 (/opt/ros/galactic/share/rclcpp/cmake)
[1.129s] -- Using all available rosidl_typesupport_c: rosidl_typesupport_fastrtps_c;rosidl_typesupport_introspection_c
[1.134s] -- Found rosidl_adapter: 2.2.3 (/opt/ros/galactic/share/rosidl_adapter/cmake)
[1.204s] -- Found OpenSSL: /usr/lib/x86_64-linux-gnu/libcrypto.so (found version "1.1.1f")  
[1.231s] -- Found FastRTPS: /opt/ros/galactic/include  
[1.287s] -- Using all available rosidl_typesupport_cpp: rosidl_typesupport_fastrtps_cpp;rosidl_typesupport_introspection_cpp
[1.329s] -- Found rmw_implementation_cmake: 3.3.1 (/opt/ros/galactic/share/rmw_implementation_cmake/cmake)
[1.331s] -- Found rmw_cyclonedds_cpp: 0.22.6 (/opt/ros/galactic/share/rmw_cyclonedds_cpp/cmake)
[1.344s] -- Using RMW implementation 'rmw_cyclonedds_cpp' as default
[1.345s] -- Looking for pthread.h
[1.406s] -- Looking for pthread.h - found
[1.406s] -- Performing Test CMAKE_HAVE_LIBC_PTHREAD
[1.479s] -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
[1.479s] -- Looking for pthread_create in pthreads
[1.531s] -- Looking for pthread_create in pthreads - not found
[1.532s] -- Looking for pthread_create in pthread
[1.599s] -- Looking for pthread_create in pthread - found
[1.600s] -- Found Threads: TRUE  
[1.705s] -- Found sensor_msgs: 2.2.4 (/opt/ros/galactic/share/sensor_msgs/cmake)
[1.784s] -- Found visualization_msgs: 2.2.4 (/opt/ros/galactic/share/visualization_msgs/cmake)
[1.832s] -- Found std_srvs: 2.2.4 (/opt/ros/galactic/share/std_srvs/cmake)
[1.842s] -- Found ament_lint_auto: 0.10.7 (/opt/ros/galactic/share/ament_lint_auto/cmake)
[1.898s] -- Added test 'copyright' to check source files copyright and LICENSE
[1.901s] -- Added test 'cppcheck' to perform static code analysis on C / C++ code
[1.901s] -- Configured cppcheck include dirs: /home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src
[1.901s] -- Configured cppcheck exclude dirs and/or files: 
[1.904s] -- Added test 'cpplint' to check C / C++ code against the Google style
[1.904s] -- Configured cpplint exclude dirs and/or files: 
[1.905s] -- Added test 'flake8' to check Python code syntax and style conventions
[1.906s] -- Added test 'lint_cmake' to check CMake code style
[1.906s] -- Added test 'pep257' to check Python code against some of the style conventions in PEP 257
[1.909s] -- Added test 'uncrustify' to check C / C++ code style
[1.909s] -- Configured uncrustify additional arguments: 
[1.910s] -- Added test 'xmllint' to check XML markup files
[1.912s] -- Configuring done
[1.925s] -- Generating done
[1.925s] -- Build files have been written to: /home/ohj/mecanum-ros2/build/ydlidar_ros2_driver
[1.931s] Invoked command in '/home/ohj/mecanum-ros2/build/ydlidar_ros2_driver' returned '0': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/ohj/mecanum-ros2/install/teleop_keyboard:/home/ohj/mecanum-ros2/install/motor_control:/home/ohj/mecanum-ros2/install/mobile_description:/home/ohj/mecanum-ros2/install/mecanum_odometry:/opt/ros/galactic /usr/bin/cmake /home/ohj/mecanum-ros2/src/ydlidar_ros2_driver -DCMAKE_INSTALL_PREFIX=/home/ohj/mecanum-ros2/install/ydlidar_ros2_driver
[1.932s] Invoking command in '/home/ohj/mecanum-ros2/build/ydlidar_ros2_driver': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/ohj/mecanum-ros2/install/teleop_keyboard:/home/ohj/mecanum-ros2/install/motor_control:/home/ohj/mecanum-ros2/install/mobile_description:/home/ohj/mecanum-ros2/install/mecanum_odometry:/opt/ros/galactic /usr/bin/cmake --build /home/ohj/mecanum-ros2/build/ydlidar_ros2_driver -- -j16 -l16
[1.976s] [35m[1mScanning dependencies of target ydlidar_ros2_driver_node[0m
[1.977s] [35m[1mScanning dependencies of target ydlidar_ros2_driver_client[0m
[2.003s] [ 25%] [32mBuilding CXX object CMakeFiles/ydlidar_ros2_driver_client.dir/src/ydlidar_ros2_driver_client.cpp.o[0m
[2.007s] [ 50%] [32mBuilding CXX object CMakeFiles/ydlidar_ros2_driver_node.dir/src/ydlidar_ros2_driver_node.cpp.o[0m
[2.186s] In file included from [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/v8stdint.h:142[m[K,
[2.186s]                  from [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:2[m[K,
[2.186s]                  from [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/src/CYdLidar.h:48[m[K,
[2.187s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:16[m[K:
[2.187s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/ydlidar.h:[m[K In function â€˜[01m[Kbool ydlidar::core::base::fileExists(const string&)[m[Kâ€™:
[2.187s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/ydlidar.h:183:24:[m[K [01;35m[Kwarning: [m[Kmissing initializer for member â€˜[01m[Kstat::st_ino[m[Kâ€™ [[01;35m[K-Wmissing-field-initializers[m[K]
[2.187s]   183 |   struct stat info = {0[01;35m[K}[m[K;
[2.187s]       |                        [01;35m[K^[m[K
[2.187s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/ydlidar.h:183:24:[m[K [01;35m[Kwarning: [m[Kmissing initializer for member â€˜[01m[Kstat::st_nlink[m[Kâ€™ [[01;35m[K-Wmissing-field-initializers[m[K]
[2.187s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/ydlidar.h:183:24:[m[K [01;35m[Kwarning: [m[Kmissing initializer for member â€˜[01m[Kstat::st_mode[m[Kâ€™ [[01;35m[K-Wmissing-field-initializers[m[K]
[2.188s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/ydlidar.h:183:24:[m[K [01;35m[Kwarning: [m[Kmissing initializer for member â€˜[01m[Kstat::st_uid[m[Kâ€™ [[01;35m[K-Wmissing-field-initializers[m[K]
[2.188s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/ydlidar.h:183:24:[m[K [01;35m[Kwarning: [m[Kmissing initializer for member â€˜[01m[Kstat::st_gid[m[Kâ€™ [[01;35m[K-Wmissing-field-initializers[m[K]
[2.188s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/ydlidar.h:183:24:[m[K [01;35m[Kwarning: [m[Kmissing initializer for member â€˜[01m[Kstat::__pad0[m[Kâ€™ [[01;35m[K-Wmissing-field-initializers[m[K]
[2.188s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/ydlidar.h:183:24:[m[K [01;35m[Kwarning: [m[Kmissing initializer for member â€˜[01m[Kstat::st_rdev[m[Kâ€™ [[01;35m[K-Wmissing-field-initializers[m[K]
[2.188s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/ydlidar.h:183:24:[m[K [01;35m[Kwarning: [m[Kmissing initializer for member â€˜[01m[Kstat::st_size[m[Kâ€™ [[01;35m[K-Wmissing-field-initializers[m[K]
[2.188s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/ydlidar.h:183:24:[m[K [01;35m[Kwarning: [m[Kmissing initializer for member â€˜[01m[Kstat::st_blksize[m[Kâ€™ [[01;35m[K-Wmissing-field-initializers[m[K]
[2.188s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/ydlidar.h:183:24:[m[K [01;35m[Kwarning: [m[Kmissing initializer for member â€˜[01m[Kstat::st_blocks[m[Kâ€™ [[01;35m[K-Wmissing-field-initializers[m[K]
[2.188s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/ydlidar.h:183:24:[m[K [01;35m[Kwarning: [m[Kmissing initializer for member â€˜[01m[Kstat::st_atim[m[Kâ€™ [[01;35m[K-Wmissing-field-initializers[m[K]
[2.188s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/ydlidar.h:183:24:[m[K [01;35m[Kwarning: [m[Kmissing initializer for member â€˜[01m[Kstat::st_mtim[m[Kâ€™ [[01;35m[K-Wmissing-field-initializers[m[K]
[2.188s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/ydlidar.h:183:24:[m[K [01;35m[Kwarning: [m[Kmissing initializer for member â€˜[01m[Kstat::st_ctim[m[Kâ€™ [[01;35m[K-Wmissing-field-initializers[m[K]
[2.188s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/ydlidar.h:183:24:[m[K [01;35m[Kwarning: [m[Kmissing initializer for member â€˜[01m[Kstat::__glibc_reserved[m[Kâ€™ [[01;35m[K-Wmissing-field-initializers[m[K]
[2.188s] In file included from [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:3[m[K,
[2.189s]                  from [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/src/CYdLidar.h:48[m[K,
[2.189s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:16[m[K:
[2.189s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/thread.h:[m[K In static member function â€˜[01m[Kstatic ydlidar::core::base::Thread ydlidar::core::base::Thread::createThread(thread_proc_t, void*)[m[Kâ€™:
[2.189s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/thread.h:55:61:[m[K [01;35m[Kwarning: [m[Kcast between incompatible function types from â€˜[01m[Kthread_proc_t[m[Kâ€™ {aka â€˜[01m[Klong unsigned int (*)(void*)[m[Kâ€™} to â€˜[01m[Kvoid* (*)(void*)[m[Kâ€™ [[01;35m[K-Wcast-function-type[m[K]
[2.189s]    55 |                                    NULL, (void *(*)(void *))[01;35m[Kproc[m[K,
[2.189s]       |                                                             [01;35m[K^~~~[m[K
[2.189s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/thread.h:[m[K In member function â€˜[01m[Kint ydlidar::core::base::Thread::join(long unsigned int)[m[Kâ€™:
[2.189s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/thread.h:136:46:[m[K [01;35m[Kwarning: [m[Kformat â€˜[01m[K%X[m[Kâ€™ expects argument of type â€˜[01m[Kunsigned int[m[Kâ€™, but argument 2 has type â€˜[01m[K_size_t[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wformat=[m[K]
[2.189s]   136 |           printf("[YDLIDAR DEBUG] Thread [0x[01;35m[K%X[m[K] ready to cancel[%d]\n", [32m[K_handle[m[K, s);
[2.189s]       |                                             [01;35m[K~^[m[K                          [32m[K~~~~~~~[m[K
[2.189s]       |                                              [01;35m[K|[m[K                          [32m[K|[m[K
[2.189s]       |                                              [01;35m[Kunsigned int[m[K               [32m[K_size_t {aka long unsigned int}[m[K
[2.189s]       |                                             [32m[K%lX[m[K
[2.190s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/thread.h:138:46:[m[K [01;35m[Kwarning: [m[Kformat â€˜[01m[K%X[m[Kâ€™ expects argument of type â€˜[01m[Kunsigned int[m[Kâ€™, but argument 2 has type â€˜[01m[K_size_t[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wformat=[m[K]
[2.190s]   138 |           printf("[YDLIDAR DEBUG] Thread [0x[01;35m[K%X[m[K] ready to cancel[%d] time[%u]\n",
[2.190s]       |                                             [01;35m[K~^[m[K
[2.190s]       |                                              [01;35m[K|[m[K
[2.190s]       |                                              [01;35m[Kunsigned int[m[K
[2.190s]       |                                             [32m[K%lX[m[K
[2.190s]   139 |             [32m[K_handle[m[K, s, getms() - t);
[2.190s]       |             [32m[K~~~~~~~[m[K                           
[2.190s]       |             [32m[K|[m[K
[2.190s]       |             [32m[K_size_t {aka long unsigned int}[m[K
[2.190s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/thread.h:142:42:[m[K [01;35m[Kwarning: [m[Kformat â€˜[01m[K%X[m[Kâ€™ expects argument of type â€˜[01m[Kunsigned int[m[Kâ€™, but argument 2 has type â€˜[01m[K_size_t[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wformat=[m[K]
[2.191s]   142 |             printf("[YDLIDAR] Thread [0x[01;35m[K%X[m[K] has been canceled in other thread\n", [32m[K_handle[m[K);
[2.191s]       |                                         [01;35m[K~^[m[K                                        [32m[K~~~~~~~[m[K
[2.191s]       |                                          [01;35m[K|[m[K                                        [32m[K|[m[K
[2.191s]       |                                          [01;35m[Kunsigned int[m[K                             [32m[K_size_t {aka long unsigned int}[m[K
[2.191s]       |                                         [32m[K%lX[m[K
[2.191s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/thread.h:147:74:[m[K [01;35m[Kwarning: [m[Kformat â€˜[01m[K%X[m[Kâ€™ expects argument of type â€˜[01m[Kunsigned int[m[Kâ€™, but argument 3 has type â€˜[01m[K_size_t[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wformat=[m[K]
[2.191s]   147 |             fprintf(stderr, "[YDLIDAR] An error occurred while thread[0x[01;35m[K%X[m[K] cancelled!\n", [32m[K_handle[m[K);
[2.191s]       |                                                                         [01;35m[K~^[m[K                 [32m[K~~~~~~~[m[K
[2.191s]       |                                                                          [01;35m[K|[m[K                 [32m[K|[m[K
[2.191s]       |                                                                          [01;35m[Kunsigned int[m[K      [32m[K_size_t {aka long unsigned int}[m[K
[2.191s]       |                                                                         [32m[K%lX[m[K
[2.191s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/base/thread.h:151:40:[m[K [01;35m[Kwarning: [m[Kformat â€˜[01m[K%X[m[Kâ€™ expects argument of type â€˜[01m[Kunsigned int[m[Kâ€™, but argument 2 has type â€˜[01m[K_size_t[m[Kâ€™ {aka â€˜[01m[Klong unsigned int[m[Kâ€™} [[01;35m[K-Wformat=[m[K]
[2.192s]   151 |           printf("[YDLIDAR] Thread [0x[01;35m[K%X[m[K] has been canceled\n", [32m[K_handle[m[K);
[2.192s]       |                                       [01;35m[K~^[m[K                        [32m[K~~~~~~~[m[K
[2.192s]       |                                        [01;35m[K|[m[K                        [32m[K|[m[K
[2.192s]       |                                        [01;35m[Kunsigned int[m[K             [32m[K_size_t {aka long unsigned int}[m[K
[2.192s]       |                                       [32m[K%lX[m[K
[2.312s] In file included from [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/src/CYdLidar.h:48[m[K,
[2.312s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:16[m[K:
[2.312s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:[m[K In member function â€˜[01m[Kvirtual result_t ydlidar::core::common::DriverInterface::getScanFrequency(scan_frequency&, uint32_t)[m[Kâ€™:
[2.312s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:332:53:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kfrequency[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.313s]   332 |   virtual result_t getScanFrequency([01;35m[Kscan_frequency &frequency[m[K,
[2.313s]       |                                     [01;35m[K~~~~~~~~~~~~~~~~^~~~~~~~~[m[K
[2.313s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:333:46:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Ktimeout[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.313s]   333 |                                     [01;35m[Kuint32_t timeout = DEFAULT_TIMEOUT[m[K) {
[2.313s]       |                                     [01;35m[K~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.313s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:[m[K In member function â€˜[01m[Kvirtual result_t ydlidar::core::common::DriverInterface::setScanFrequencyAdd(scan_frequency&, uint32_t)[m[Kâ€™:
[2.313s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:346:56:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kfrequency[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.313s]   346 |   virtual result_t setScanFrequencyAdd([01;35m[Kscan_frequency &frequency[m[K,
[2.313s]       |                                        [01;35m[K~~~~~~~~~~~~~~~~^~~~~~~~~[m[K
[2.313s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:347:49:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Ktimeout[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.313s]   347 |                                        [01;35m[Kuint32_t timeout = DEFAULT_TIMEOUT[m[K) {
[2.313s]       |                                        [01;35m[K~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.314s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:[m[K In member function â€˜[01m[Kvirtual result_t ydlidar::core::common::DriverInterface::setScanFrequencyDis(scan_frequency&, uint32_t)[m[Kâ€™:
[2.314s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:360:56:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kfrequency[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.314s]   360 |   virtual result_t setScanFrequencyDis([01;35m[Kscan_frequency &frequency[m[K,
[2.314s]       |                                        [01;35m[K~~~~~~~~~~~~~~~~^~~~~~~~~[m[K
[2.314s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:361:49:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Ktimeout[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.314s]   361 |                                        [01;35m[Kuint32_t timeout = DEFAULT_TIMEOUT[m[K) {
[2.314s]       |                                        [01;35m[K~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.314s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:[m[K In member function â€˜[01m[Kvirtual result_t ydlidar::core::common::DriverInterface::setScanFrequencyAddMic(scan_frequency&, uint32_t)[m[Kâ€™:
[2.314s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:374:59:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kfrequency[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.314s]   374 |   virtual result_t setScanFrequencyAddMic([01;35m[Kscan_frequency &frequency[m[K,
[2.314s]       |                                           [01;35m[K~~~~~~~~~~~~~~~~^~~~~~~~~[m[K
[2.314s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:375:52:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Ktimeout[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.314s]   375 |                                           [01;35m[Kuint32_t timeout = DEFAULT_TIMEOUT[m[K) {
[2.314s]       |                                           [01;35m[K~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.314s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:[m[K In member function â€˜[01m[Kvirtual result_t ydlidar::core::common::DriverInterface::setScanFrequencyDisMic(scan_frequency&, uint32_t)[m[Kâ€™:
[2.315s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:388:59:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kfrequency[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.315s]   388 |   virtual result_t setScanFrequencyDisMic([01;35m[Kscan_frequency &frequency[m[K,
[2.315s]       |                                           [01;35m[K~~~~~~~~~~~~~~~~^~~~~~~~~[m[K
[2.315s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:389:52:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Ktimeout[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.315s]   389 |                                           [01;35m[Kuint32_t timeout = DEFAULT_TIMEOUT[m[K) {
[2.315s]       |                                           [01;35m[K~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.315s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:[m[K In member function â€˜[01m[Kvirtual result_t ydlidar::core::common::DriverInterface::getSamplingRate(sampling_rate&, uint32_t)[m[Kâ€™:
[2.315s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:402:51:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Krate[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.315s]   402 |   virtual result_t getSamplingRate([01;35m[Ksampling_rate &rate[m[K,
[2.315s]       |                                    [01;35m[K~~~~~~~~~~~~~~~^~~~[m[K
[2.315s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:403:45:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Ktimeout[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.315s]   403 |                                    [01;35m[Kuint32_t timeout = DEFAULT_TIMEOUT[m[K) {
[2.315s]       |                                    [01;35m[K~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.315s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:[m[K In member function â€˜[01m[Kvirtual result_t ydlidar::core::common::DriverInterface::setSamplingRate(sampling_rate&, uint32_t)[m[Kâ€™:
[2.315s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:416:51:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Krate[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.316s]   416 |   virtual result_t setSamplingRate([01;35m[Ksampling_rate &rate[m[K,
[2.316s]       |                                    [01;35m[K~~~~~~~~~~~~~~~^~~~[m[K
[2.316s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:417:45:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Ktimeout[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.316s]   417 |                                    [01;35m[Kuint32_t timeout = DEFAULT_TIMEOUT[m[K) {
[2.316s]       |                                    [01;35m[K~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.316s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:[m[K In member function â€˜[01m[Kvirtual result_t ydlidar::core::common::DriverInterface::getZeroOffsetAngle(offset_angle&, uint32_t)[m[Kâ€™:
[2.316s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:430:53:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kangle[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.316s]   430 |   virtual result_t getZeroOffsetAngle([01;35m[Koffset_angle &angle[m[K,
[2.316s]       |                                       [01;35m[K~~~~~~~~~~~~~~^~~~~[m[K
[2.316s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:431:48:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Ktimeout[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.316s]   431 |                                       [01;35m[Kuint32_t timeout = DEFAULT_TIMEOUT[m[K) {
[2.316s]       |                                       [01;35m[K~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.316s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:[m[K In member function â€˜[01m[Kvirtual result_t ydlidar::core::common::DriverInterface::setScanHeartbeat(scan_heart_beat&, uint32_t)[m[Kâ€™:
[2.316s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:445:54:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kbeat[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.316s]   445 |   virtual result_t setScanHeartbeat([01;35m[Kscan_heart_beat &beat[m[K,
[2.317s]       |                                     [01;35m[K~~~~~~~~~~~~~~~~~^~~~[m[K
[2.317s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:446:46:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Ktimeout[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.317s]   446 |                                     [01;35m[Kuint32_t timeout = DEFAULT_TIMEOUT[m[K) {
[2.317s]       |                                     [01;35m[K~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[2.317s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:[m[K In member function â€˜[01m[Kvirtual result_t ydlidar::core::common::DriverInterface::setWorkMode(int, uint8_t)[m[Kâ€™:
[2.317s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:474:36:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kmode[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.317s]   474 |   virtual result_t setWorkMode([01;35m[Kint mode=0[m[K, uint8_t addr=0x00) {return RESULT_FAIL;}
[2.317s]       |                                [01;35m[K~~~~^~~~~~[m[K
[2.317s] [01m[K/home/ohj/YDLidar-SDK/install/ydlidar_sdk/include/core/common/DriverInterface.h:474:52:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kaddr[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[2.317s]   474 |   virtual result_t setWorkMode(int mode=0, [01;35m[Kuint8_t addr=0x00[m[K) {return RESULT_FAIL;}
[2.317s]       |                                            [01;35m[K~~~~~~~~^~~~~~~~~[m[K
[3.261s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In function â€˜[01m[Kint main(int, char**)[m[Kâ€™:
[3.261s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:44:33:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.261s]    44 |   node->declare_parameter("port"[01;35m[K)[m[K;
[3.262s]       |                                 [01;35m[K^[m[K
[3.262s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.262s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.262s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.263s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.263s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.263s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.263s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.263s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:51:41:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.263s]    51 |   node->declare_parameter("ignore_array"[01;35m[K)[m[K;
[3.263s]       |                                         [01;35m[K^[m[K
[3.263s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.263s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.264s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.264s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.264s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.264s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.264s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.264s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:56:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.264s]    56 |   node->declare_parameter("frame_id"[01;35m[K)[m[K;
[3.264s]       |                                     [01;35m[K^[m[K
[3.264s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.264s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.264s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.264s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.264s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.264s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.265s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.265s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:62:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.265s]    62 |   node->declare_parameter("baudrate"[01;35m[K)[m[K;
[3.265s]       |                                     [01;35m[K^[m[K
[3.265s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.265s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.265s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.265s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.265s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.265s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.265s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.265s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:67:39:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.266s]    67 |   node->declare_parameter("lidar_type"[01;35m[K)[m[K;
[3.266s]       |                                       [01;35m[K^[m[K
[3.266s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.266s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.266s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.266s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.266s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.266s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.266s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.266s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:72:40:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.266s]    72 |   node->declare_parameter("device_type"[01;35m[K)[m[K;
[3.266s]       |                                        [01;35m[K^[m[K
[3.266s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.267s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.267s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.267s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.267s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.267s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.267s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.267s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:77:40:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.267s]    77 |   node->declare_parameter("sample_rate"[01;35m[K)[m[K;
[3.267s]       |                                        [01;35m[K^[m[K
[3.267s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.267s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.268s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.268s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.268s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.268s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.268s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.268s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:82:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.268s]    82 |   node->declare_parameter("abnormal_check_count"[01;35m[K)[m[K;
[3.268s]       |                                                 [01;35m[K^[m[K
[3.268s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.268s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.268s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.268s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.268s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.268s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.268s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.269s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:90:45:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.269s]    90 |   node->declare_parameter("fixed_resolution"[01;35m[K)[m[K;
[3.269s]       |                                             [01;35m[K^[m[K
[3.269s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.269s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.269s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.269s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.269s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.269s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.269s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.269s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:95:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.269s]    95 |   node->declare_parameter("reversion"[01;35m[K)[m[K;
[3.269s]       |                                      [01;35m[K^[m[K
[3.270s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.270s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.270s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.270s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.270s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.270s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.270s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.270s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:100:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.270s]   100 |   node->declare_parameter("inverted"[01;35m[K)[m[K;
[3.270s]       |                                     [01;35m[K^[m[K
[3.270s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.271s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.271s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.271s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.271s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.271s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.271s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.271s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:104:43:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.271s]   104 |   node->declare_parameter("auto_reconnect"[01;35m[K)[m[K;
[3.271s]       |                                           [01;35m[K^[m[K
[3.271s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.271s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.272s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.272s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.272s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.272s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.272s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.272s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:109:44:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.272s]   109 |   node->declare_parameter("isSingleChannel"[01;35m[K)[m[K;
[3.272s]       |                                            [01;35m[K^[m[K
[3.272s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.272s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.272s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.272s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.273s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.273s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.273s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.273s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:114:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.273s]   114 |   node->declare_parameter("intensity"[01;35m[K)[m[K;
[3.273s]       |                                      [01;35m[K^[m[K
[3.273s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.273s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.273s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.273s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.273s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.273s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.273s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.273s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:119:46:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.274s]   119 |   node->declare_parameter("support_motor_dtr"[01;35m[K)[m[K;
[3.274s]       |                                              [01;35m[K^[m[K
[3.274s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.274s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.274s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.274s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.274s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.274s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.274s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.274s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:126:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.274s]   126 |   node->declare_parameter("angle_max"[01;35m[K)[m[K;
[3.274s]       |                                      [01;35m[K^[m[K
[3.275s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.275s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.275s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.275s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.275s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.275s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.275s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.275s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:130:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.275s]   130 |   node->declare_parameter("angle_min"[01;35m[K)[m[K;
[3.275s]       |                                      [01;35m[K^[m[K
[3.275s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.275s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.275s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.276s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.276s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.276s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.276s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.276s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:135:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.276s]   135 |   node->declare_parameter("range_max"[01;35m[K)[m[K;
[3.276s]       |                                      [01;35m[K^[m[K
[3.276s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.276s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.276s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.276s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.276s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.276s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.276s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.276s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:139:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.277s]   139 |   node->declare_parameter("range_min"[01;35m[K)[m[K;
[3.277s]       |                                      [01;35m[K^[m[K
[3.277s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.277s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.277s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.277s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.277s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.277s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.277s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.277s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:144:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.277s]   144 |   node->declare_parameter("frequency"[01;35m[K)[m[K;
[3.277s]       |                                      [01;35m[K^[m[K
[3.277s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.277s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.278s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.278s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.278s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.278s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.278s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.278s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:149:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[3.278s]   149 |   node->declare_parameter("invalid_range_is_inf"[01;35m[K)[m[K;
[3.278s]       |                                                 [01;35m[K^[m[K
[3.278s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[3.278s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[3.278s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[3.278s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[3.278s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[3.279s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[3.279s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[3.279s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In lambda function:
[3.279s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:163:54:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Krequest_header[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[3.279s]   163 |     [&laser]([01;35m[Kconst std::shared_ptr<rmw_request_id_t> request_header[m[K,
[3.279s]       |              [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~[m[K
[3.279s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:164:56:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kreq[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[3.279s]   164 |   [01;35m[Kconst std::shared_ptr<std_srvs::srv::Empty::Request> req[m[K,
[3.279s]       |   [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~[m[K
[3.279s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:165:51:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kresponse[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[3.279s]   165 |   [01;35m[Kstd::shared_ptr<std_srvs::srv::Empty::Response> response[m[K) -> bool
[3.279s]       |   [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~[m[K
[3.279s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In lambda function:
[3.280s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:173:54:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Krequest_header[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[3.280s]   173 |     [&laser]([01;35m[Kconst std::shared_ptr<rmw_request_id_t> request_header[m[K,
[3.280s]       |              [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~[m[K
[3.280s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:174:56:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kreq[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[3.280s]   174 |   [01;35m[Kconst std::shared_ptr<std_srvs::srv::Empty::Request> req[m[K,
[3.280s]       |   [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~[m[K
[3.280s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:175:51:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kresponse[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[3.280s]   175 |   [01;35m[Kstd::shared_ptr<std_srvs::srv::Empty::Response> response[m[K) -> bool
[3.280s]       |   [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~[m[K
[5.106s] [ 75%] [32m[1mLinking CXX executable ydlidar_ros2_driver_node[0m
[5.174s] /usr/bin/ld: cannot find -lydlidar_sdk
[5.179s] collect2: error: ld returned 1 exit status
[5.181s] make[2]: *** [CMakeFiles/ydlidar_ros2_driver_node.dir/build.make:152: ydlidar_ros2_driver_node] Error 1
[5.181s] make[1]: *** [CMakeFiles/Makefile2:107: CMakeFiles/ydlidar_ros2_driver_node.dir/all] Error 2
[5.181s] make[1]: *** Waiting for unfinished jobs....
[7.093s] [100%] [32m[1mLinking CXX executable ydlidar_ros2_driver_client[0m
[7.289s] [100%] Built target ydlidar_ros2_driver_client
[7.290s] make: *** [Makefile:141: all] Error 2
[7.292s] Invoked command in '/home/ohj/mecanum-ros2/build/ydlidar_ros2_driver' returned '2': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/ohj/mecanum-ros2/install/teleop_keyboard:/home/ohj/mecanum-ros2/install/motor_control:/home/ohj/mecanum-ros2/install/mobile_description:/home/ohj/mecanum-ros2/install/mecanum_odometry:/opt/ros/galactic /usr/bin/cmake --build /home/ohj/mecanum-ros2/build/ydlidar_ros2_driver -- -j16 -l16
