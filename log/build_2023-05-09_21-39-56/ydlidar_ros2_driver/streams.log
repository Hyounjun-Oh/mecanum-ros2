[6.324s] Invoking command in '/home/jetson/mecanum-ros2/build/ydlidar_ros2_driver': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/jetson/mecanum-ros2/install/teleop_keyboard:/home/jetson/mecanum-ros2/install/motor_control:/home/jetson/mecanum-ros2/install/mobile_description:/home/jetson/mecanum-ros2/install/mecanum_odometry:/opt/ros/galactic /usr/bin/cmake /home/jetson/mecanum-ros2/src/ydlidar_ros2_driver -DCMAKE_INSTALL_PREFIX=/home/jetson/mecanum-ros2/install/ydlidar_ros2_driver
[7.129s] -- The C compiler identification is GNU 8.4.0
[7.947s] -- The CXX compiler identification is GNU 8.4.0
[8.040s] -- Check for working C compiler: /usr/bin/cc
[8.949s] -- Check for working C compiler: /usr/bin/cc -- works
[8.965s] -- Detecting C compiler ABI info
[10.068s] -- Detecting C compiler ABI info - done
[10.330s] -- Detecting C compile features
[10.338s] -- Detecting C compile features - done
[10.383s] -- Check for working CXX compiler: /usr/bin/c++
[11.508s] -- Check for working CXX compiler: /usr/bin/c++ -- works
[11.526s] -- Detecting CXX compiler ABI info
[12.619s] -- Detecting CXX compiler ABI info - done
[12.896s] -- Detecting CXX compile features
[12.904s] -- Detecting CXX compile features - done
[12.980s] -- Found ament_cmake: 1.1.6 (/opt/ros/galactic/share/ament_cmake/cmake)
[13.447s] -- Found PythonInterp: /usr/bin/python3 (found suitable version "3.8.10", minimum required is "3") 
[13.452s] -- Using PYTHON_EXECUTABLE: /usr/bin/python3
[15.099s] -- Found rclcpp: 9.2.2 (/opt/ros/galactic/share/rclcpp/cmake)
[16.207s] -- Using all available rosidl_typesupport_c: rosidl_typesupport_fastrtps_c;rosidl_typesupport_introspection_c
[16.391s] -- Found rosidl_adapter: 2.2.3 (/opt/ros/galactic/share/rosidl_adapter/cmake)
[18.003s] -- Found OpenSSL: /usr/lib/aarch64-linux-gnu/libcrypto.so (found version "1.1.1f")  
[18.514s] -- Found FastRTPS: /opt/ros/galactic/include  
[20.228s] -- Using all available rosidl_typesupport_cpp: rosidl_typesupport_fastrtps_cpp;rosidl_typesupport_introspection_cpp
[21.545s] -- Found rmw_implementation_cmake: 3.3.1 (/opt/ros/galactic/share/rmw_implementation_cmake/cmake)
[21.617s] -- Found rmw_cyclonedds_cpp: 0.22.6 (/opt/ros/galactic/share/rmw_cyclonedds_cpp/cmake)
[22.019s] -- Using RMW implementation 'rmw_cyclonedds_cpp' as default
[22.032s] -- Looking for pthread.h
[22.956s] -- Looking for pthread.h - found
[22.959s] -- Performing Test CMAKE_HAVE_LIBC_PTHREAD
[23.896s] -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
[23.899s] -- Looking for pthread_create in pthreads
[24.642s] -- Looking for pthread_create in pthreads - not found
[24.644s] -- Looking for pthread_create in pthread
[25.558s] -- Looking for pthread_create in pthread - found
[25.572s] -- Found Threads: TRUE  
[28.731s] -- Found sensor_msgs: 2.2.4 (/opt/ros/galactic/share/sensor_msgs/cmake)
[31.089s] -- Found visualization_msgs: 2.2.4 (/opt/ros/galactic/share/visualization_msgs/cmake)
[32.548s] -- Found std_srvs: 2.2.4 (/opt/ros/galactic/share/std_srvs/cmake)
[32.915s] -- Found ament_lint_auto: 0.10.7 (/opt/ros/galactic/share/ament_lint_auto/cmake)
[34.427s] -- Added test 'copyright' to check source files copyright and LICENSE
[34.485s] -- Added test 'cppcheck' to perform static code analysis on C / C++ code
[34.493s] -- Configured cppcheck include dirs: /home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src
[34.495s] -- Configured cppcheck exclude dirs and/or files: 
[34.574s] -- Added test 'cpplint' to check C / C++ code against the Google style
[34.575s] -- Configured cpplint exclude dirs and/or files: 
[34.585s] -- Added test 'flake8' to check Python code syntax and style conventions
[34.612s] -- Added test 'lint_cmake' to check CMake code style
[34.627s] -- Added test 'pep257' to check Python code against some of the style conventions in PEP 257
[34.660s] -- Added test 'uncrustify' to check C / C++ code style
[34.662s] -- Configured uncrustify additional arguments: 
[34.676s] -- Added test 'xmllint' to check XML markup files
[34.763s] -- Configuring done
[35.138s] -- Generating done
[35.189s] -- Build files have been written to: /home/jetson/mecanum-ros2/build/ydlidar_ros2_driver
[35.346s] Invoked command in '/home/jetson/mecanum-ros2/build/ydlidar_ros2_driver' returned '0': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/jetson/mecanum-ros2/install/teleop_keyboard:/home/jetson/mecanum-ros2/install/motor_control:/home/jetson/mecanum-ros2/install/mobile_description:/home/jetson/mecanum-ros2/install/mecanum_odometry:/opt/ros/galactic /usr/bin/cmake /home/jetson/mecanum-ros2/src/ydlidar_ros2_driver -DCMAKE_INSTALL_PREFIX=/home/jetson/mecanum-ros2/install/ydlidar_ros2_driver
[35.365s] Invoking command in '/home/jetson/mecanum-ros2/build/ydlidar_ros2_driver': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/jetson/mecanum-ros2/install/teleop_keyboard:/home/jetson/mecanum-ros2/install/motor_control:/home/jetson/mecanum-ros2/install/mobile_description:/home/jetson/mecanum-ros2/install/mecanum_odometry:/opt/ros/galactic /usr/bin/cmake --build /home/jetson/mecanum-ros2/build/ydlidar_ros2_driver -- -j4 -l4
[36.527s] [35m[1mScanning dependencies of target ydlidar_ros2_driver_client[0m
[37.568s] [ 25%] [32mBuilding CXX object CMakeFiles/ydlidar_ros2_driver_client.dir/src/ydlidar_ros2_driver_client.cpp.o[0m
[125.966s] [ 50%] [32m[1mLinking CXX executable ydlidar_ros2_driver_client[0m
[132.128s] [ 50%] Built target ydlidar_ros2_driver_client
[132.265s] [35m[1mScanning dependencies of target ydlidar_ros2_driver_node[0m
[133.224s] [ 75%] [32mBuilding CXX object CMakeFiles/ydlidar_ros2_driver_node.dir/src/ydlidar_ros2_driver_node.cpp.o[0m
[155.529s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In function â€˜[01m[Kint main(int, char**)[m[Kâ€™:
[155.533s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:44:33:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[155.537s] If you want to declare a parameter that won't change type without a default value use:
[155.542s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[155.544s] 
[155.546s] If you want to declare a parameter that can dynamically change type use:
[155.547s] ```
[155.549s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[155.550s] descriptor.dynamic_typing = true;
[155.551s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[155.563s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[155.565s]    node->declare_parameter("port"[01;35m[K)[m[K;
[155.569s]                                  [01;35m[K^[m[K
[155.579s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[155.585s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[155.592s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[155.594s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[155.595s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[155.597s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[155.598s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[155.600s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:51:41:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[155.601s] If you want to declare a parameter that won't change type without a default value use:
[155.603s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[155.604s] 
[155.606s] If you want to declare a parameter that can dynamically change type use:
[155.607s] ```
[155.609s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[155.610s] descriptor.dynamic_typing = true;
[155.611s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[155.613s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[155.614s]    node->declare_parameter("ignore_array"[01;35m[K)[m[K;
[155.616s]                                          [01;35m[K^[m[K
[155.617s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[155.619s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[155.621s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[155.622s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[155.624s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[155.626s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[155.628s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[155.629s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:56:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[155.631s] If you want to declare a parameter that won't change type without a default value use:
[155.633s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[155.635s] 
[155.637s] If you want to declare a parameter that can dynamically change type use:
[155.638s] ```
[155.640s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[155.642s] descriptor.dynamic_typing = true;
[155.643s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[155.644s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[155.646s]    node->declare_parameter("frame_id"[01;35m[K)[m[K;
[155.647s]                                      [01;35m[K^[m[K
[155.649s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[155.651s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[155.652s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[155.654s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[155.655s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[155.656s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[155.658s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[155.659s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:62:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[155.661s] If you want to declare a parameter that won't change type without a default value use:
[155.662s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[155.664s] 
[155.665s] If you want to declare a parameter that can dynamically change type use:
[155.667s] ```
[155.668s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[155.669s] descriptor.dynamic_typing = true;
[155.671s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[155.672s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[155.674s]    node->declare_parameter("baudrate"[01;35m[K)[m[K;
[155.675s]                                      [01;35m[K^[m[K
[155.677s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[155.678s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[155.679s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[155.681s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[155.682s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[155.684s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[155.685s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[155.687s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:67:39:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[155.690s] If you want to declare a parameter that won't change type without a default value use:
[155.691s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[155.693s] 
[155.694s] If you want to declare a parameter that can dynamically change type use:
[155.695s] ```
[155.697s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[155.698s] descriptor.dynamic_typing = true;
[155.701s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[155.703s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[155.705s]    node->declare_parameter("lidar_type"[01;35m[K)[m[K;
[155.707s]                                        [01;35m[K^[m[K
[155.709s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[155.710s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[155.711s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[155.713s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[155.715s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[155.716s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[155.718s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[155.719s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:72:40:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[155.721s] If you want to declare a parameter that won't change type without a default value use:
[155.722s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[155.724s] 
[155.726s] If you want to declare a parameter that can dynamically change type use:
[155.727s] ```
[155.729s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[155.731s] descriptor.dynamic_typing = true;
[155.732s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[155.735s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[155.736s]    node->declare_parameter("device_type"[01;35m[K)[m[K;
[155.738s]                                         [01;35m[K^[m[K
[155.739s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[155.741s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[155.742s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[155.744s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[155.745s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[155.746s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[155.748s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[155.750s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:77:40:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[155.751s] If you want to declare a parameter that won't change type without a default value use:
[155.753s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[155.754s] 
[155.756s] If you want to declare a parameter that can dynamically change type use:
[155.757s] ```
[155.760s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[155.762s] descriptor.dynamic_typing = true;
[155.763s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[155.764s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[155.766s]    node->declare_parameter("sample_rate"[01;35m[K)[m[K;
[155.767s]                                         [01;35m[K^[m[K
[155.769s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[155.770s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[155.772s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[155.773s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[155.775s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[155.776s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[155.778s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[155.779s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:82:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[155.781s] If you want to declare a parameter that won't change type without a default value use:
[155.782s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[155.783s] 
[155.785s] If you want to declare a parameter that can dynamically change type use:
[155.786s] ```
[155.788s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[155.791s] descriptor.dynamic_typing = true;
[155.792s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[155.794s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[155.795s]    node->declare_parameter("abnormal_check_count"[01;35m[K)[m[K;
[155.797s]                                                  [01;35m[K^[m[K
[155.798s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[155.799s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[155.801s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[155.803s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[155.804s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[155.805s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[155.807s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[155.808s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:90:45:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[155.810s] If you want to declare a parameter that won't change type without a default value use:
[155.811s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[155.813s] 
[155.814s] If you want to declare a parameter that can dynamically change type use:
[155.816s] ```
[155.817s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[155.819s] descriptor.dynamic_typing = true;
[155.820s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[155.822s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[155.823s]    node->declare_parameter("fixed_resolution"[01;35m[K)[m[K;
[155.825s]                                              [01;35m[K^[m[K
[155.827s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[155.829s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[155.830s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[155.832s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[155.834s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[155.836s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[155.838s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[155.839s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:95:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[155.841s] If you want to declare a parameter that won't change type without a default value use:
[155.842s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[155.843s] 
[155.845s] If you want to declare a parameter that can dynamically change type use:
[155.846s] ```
[155.848s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[155.850s] descriptor.dynamic_typing = true;
[155.851s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[155.852s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[155.854s]    node->declare_parameter("reversion"[01;35m[K)[m[K;
[155.855s]                                       [01;35m[K^[m[K
[155.857s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[155.858s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[155.859s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[155.861s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[155.862s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[155.864s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[155.865s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[155.867s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:100:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[155.868s] If you want to declare a parameter that won't change type without a default value use:
[155.869s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[155.871s] 
[155.872s] If you want to declare a parameter that can dynamically change type use:
[155.874s] ```
[155.875s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[155.876s] descriptor.dynamic_typing = true;
[155.878s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[155.879s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[155.881s]    node->declare_parameter("inverted"[01;35m[K)[m[K;
[155.882s]                                      [01;35m[K^[m[K
[155.883s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[155.885s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[155.886s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[155.888s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[155.889s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[155.892s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[155.893s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[155.895s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:104:43:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[155.897s] If you want to declare a parameter that won't change type without a default value use:
[155.898s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[155.899s] 
[155.901s] If you want to declare a parameter that can dynamically change type use:
[155.902s] ```
[155.904s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[155.905s] descriptor.dynamic_typing = true;
[155.907s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[155.908s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[155.909s]    node->declare_parameter("auto_reconnect"[01;35m[K)[m[K;
[155.911s]                                            [01;35m[K^[m[K
[155.912s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[155.914s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[155.915s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[155.917s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[155.918s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[155.920s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[155.922s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[155.924s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:109:44:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[155.925s] If you want to declare a parameter that won't change type without a default value use:
[155.927s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[155.929s] 
[155.930s] If you want to declare a parameter that can dynamically change type use:
[155.932s] ```
[155.934s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[155.936s] descriptor.dynamic_typing = true;
[155.938s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[155.939s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[155.941s]    node->declare_parameter("isSingleChannel"[01;35m[K)[m[K;
[155.942s]                                             [01;35m[K^[m[K
[155.943s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[155.945s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[155.947s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[155.949s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[155.950s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[155.952s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[155.953s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[155.954s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:114:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[155.956s] If you want to declare a parameter that won't change type without a default value use:
[155.957s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[155.959s] 
[155.960s] If you want to declare a parameter that can dynamically change type use:
[155.961s] ```
[155.963s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[155.964s] descriptor.dynamic_typing = true;
[155.966s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[155.967s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[155.969s]    node->declare_parameter("intensity"[01;35m[K)[m[K;
[155.970s]                                       [01;35m[K^[m[K
[155.972s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[155.973s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[155.974s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[155.976s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[155.978s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[155.979s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[155.980s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[155.982s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:119:46:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[155.983s] If you want to declare a parameter that won't change type without a default value use:
[155.985s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[155.987s] 
[155.988s] If you want to declare a parameter that can dynamically change type use:
[155.990s] ```
[155.992s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[155.994s] descriptor.dynamic_typing = true;
[155.995s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[155.997s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[155.998s]    node->declare_parameter("support_motor_dtr"[01;35m[K)[m[K;
[156.000s]                                               [01;35m[K^[m[K
[156.001s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[156.003s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[156.005s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[156.006s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[156.007s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[156.009s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[156.010s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[156.012s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:126:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[156.013s] If you want to declare a parameter that won't change type without a default value use:
[156.014s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[156.016s] 
[156.017s] If you want to declare a parameter that can dynamically change type use:
[156.019s] ```
[156.020s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[156.022s] descriptor.dynamic_typing = true;
[156.023s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[156.025s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[156.026s]    node->declare_parameter("angle_max"[01;35m[K)[m[K;
[156.028s]                                       [01;35m[K^[m[K
[156.030s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[156.031s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[156.033s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[156.035s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[156.037s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[156.038s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[156.040s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[156.041s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:130:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[156.043s] If you want to declare a parameter that won't change type without a default value use:
[156.044s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[156.045s] 
[156.047s] If you want to declare a parameter that can dynamically change type use:
[156.049s] ```
[156.050s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[156.052s] descriptor.dynamic_typing = true;
[156.053s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[156.054s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[156.056s]    node->declare_parameter("angle_min"[01;35m[K)[m[K;
[156.057s]                                       [01;35m[K^[m[K
[156.059s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[156.060s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[156.061s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[156.063s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[156.064s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[156.065s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[156.067s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[156.068s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:135:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[156.070s] If you want to declare a parameter that won't change type without a default value use:
[156.071s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[156.072s] 
[156.074s] If you want to declare a parameter that can dynamically change type use:
[156.075s] ```
[156.077s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[156.078s] descriptor.dynamic_typing = true;
[156.079s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[156.081s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[156.082s]    node->declare_parameter("range_max"[01;35m[K)[m[K;
[156.083s]                                       [01;35m[K^[m[K
[156.085s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[156.086s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[156.088s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[156.089s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[156.090s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[156.093s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[156.095s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[156.096s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:139:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[156.098s] If you want to declare a parameter that won't change type without a default value use:
[156.099s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[156.101s] 
[156.102s] If you want to declare a parameter that can dynamically change type use:
[156.103s] ```
[156.105s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[156.106s] descriptor.dynamic_typing = true;
[156.108s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[156.109s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[156.110s]    node->declare_parameter("range_min"[01;35m[K)[m[K;
[156.112s]                                       [01;35m[K^[m[K
[156.113s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[156.114s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[156.116s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[156.117s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[156.118s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[156.120s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[156.122s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[156.123s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:144:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[156.125s] If you want to declare a parameter that won't change type without a default value use:
[156.126s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[156.128s] 
[156.129s] If you want to declare a parameter that can dynamically change type use:
[156.131s] ```
[156.132s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[156.133s] descriptor.dynamic_typing = true;
[156.135s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[156.136s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[156.138s]    node->declare_parameter("frequency"[01;35m[K)[m[K;
[156.139s]                                       [01;35m[K^[m[K
[156.141s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[156.142s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[156.144s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[156.146s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[156.148s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[156.150s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[156.151s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[156.153s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:149:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[156.154s] If you want to declare a parameter that won't change type without a default value use:
[156.156s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[156.157s] 
[156.158s] If you want to declare a parameter that can dynamically change type use:
[156.160s] ```
[156.161s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[156.163s] descriptor.dynamic_typing = true;
[156.164s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[156.166s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[156.167s]    node->declare_parameter("invalid_range_is_inf"[01;35m[K)[m[K;
[156.169s]                                                  [01;35m[K^[m[K
[156.170s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[156.171s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[156.173s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[156.174s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[156.175s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[156.177s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[156.178s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[156.179s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In lambda function:
[156.181s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:163:54:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Krequest_header[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[156.182s]      [&laser]([01;35m[Kconst std::shared_ptr<rmw_request_id_t> request_header[m[K,
[156.184s]               [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~[m[K
[156.185s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:164:56:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kreq[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[156.187s]    [01;35m[Kconst std::shared_ptr<std_srvs::srv::Empty::Request> req[m[K,
[156.188s]    [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~[m[K
[156.190s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:165:51:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kresponse[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[156.191s]    [01;35m[Kstd::shared_ptr<std_srvs::srv::Empty::Response> response[m[K) -> bool
[156.194s]    [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~[m[K
[156.195s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In lambda function:
[156.197s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:173:54:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Krequest_header[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[156.198s]      [&laser]([01;35m[Kconst std::shared_ptr<rmw_request_id_t> request_header[m[K,
[156.200s]               [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~[m[K
[156.201s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:174:56:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kreq[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[156.202s]    [01;35m[Kconst std::shared_ptr<std_srvs::srv::Empty::Request> req[m[K,
[156.204s]    [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~[m[K
[156.205s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:175:51:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kresponse[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[156.207s]    [01;35m[Kstd::shared_ptr<std_srvs::srv::Empty::Response> response[m[K) -> bool
[156.208s]    [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~[m[K
[188.341s] [100%] [32m[1mLinking CXX executable ydlidar_ros2_driver_node[0m
[191.617s] [100%] Built target ydlidar_ros2_driver_node
