[0.432s] Invoking command in '/home/jetson/mecanum-ros2/build/ydlidar_ros2_driver': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/jetson/mecanum-ros2/install/teleop_keyboard:/home/jetson/mecanum-ros2/install/motor_control:/home/jetson/mecanum-ros2/install/mobile_description:/home/jetson/mecanum-ros2/install/mecanum_odometry:/home/jetson/mecanum-ros2/install/mecanum_cartographer:/home/jetson/mecanum-ros2/install/manipulator:/opt/ros/galactic /usr/bin/cmake /home/jetson/mecanum-ros2/src/ydlidar_ros2_driver -DCMAKE_INSTALL_PREFIX=/home/jetson/mecanum-ros2/install/ydlidar_ros2_driver
[2.940s] -- The C compiler identification is GNU 8.4.0
[3.639s] -- The CXX compiler identification is GNU 8.4.0
[3.659s] -- Check for working C compiler: /usr/bin/cc
[4.162s] -- Check for working C compiler: /usr/bin/cc -- works
[4.165s] -- Detecting C compiler ABI info
[7.158s] -- Detecting C compiler ABI info - done
[7.205s] -- Detecting C compile features
[7.206s] -- Detecting C compile features - done
[7.215s] -- Check for working CXX compiler: /usr/bin/c++
[7.847s] -- Check for working CXX compiler: /usr/bin/c++ -- works
[7.851s] -- Detecting CXX compiler ABI info
[8.871s] -- Detecting CXX compiler ABI info - done
[8.927s] -- Detecting CXX compile features
[8.930s] -- Detecting CXX compile features - done
[8.947s] -- Found ament_cmake: 1.1.6 (/opt/ros/galactic/share/ament_cmake/cmake)
[9.085s] -- Found PythonInterp: /usr/bin/python3 (found suitable version "3.8.10", minimum required is "3") 
[9.087s] -- Using PYTHON_EXECUTABLE: /usr/bin/python3
[9.505s] -- Found rclcpp: 9.2.2 (/opt/ros/galactic/share/rclcpp/cmake)
[9.776s] -- Using all available rosidl_typesupport_c: rosidl_typesupport_fastrtps_c;rosidl_typesupport_introspection_c
[9.820s] -- Found rosidl_adapter: 2.2.3 (/opt/ros/galactic/share/rosidl_adapter/cmake)
[10.222s] -- Found OpenSSL: /usr/lib/aarch64-linux-gnu/libcrypto.so (found version "1.1.1f")  
[10.348s] -- Found FastRTPS: /opt/ros/galactic/include  
[10.756s] -- Using all available rosidl_typesupport_cpp: rosidl_typesupport_fastrtps_cpp;rosidl_typesupport_introspection_cpp
[11.123s] -- Found rmw_implementation_cmake: 3.3.1 (/opt/ros/galactic/share/rmw_implementation_cmake/cmake)
[11.147s] -- Found rmw_cyclonedds_cpp: 0.22.6 (/opt/ros/galactic/share/rmw_cyclonedds_cpp/cmake)
[11.256s] -- Using RMW implementation 'rmw_cyclonedds_cpp' as default
[11.261s] -- Looking for pthread.h
[11.572s] -- Looking for pthread.h - found
[11.573s] -- Performing Test CMAKE_HAVE_LIBC_PTHREAD
[11.844s] -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
[11.845s] -- Looking for pthread_create in pthreads
[12.065s] -- Looking for pthread_create in pthreads - not found
[12.065s] -- Looking for pthread_create in pthread
[12.328s] -- Looking for pthread_create in pthread - found
[12.332s] -- Found Threads: TRUE  
[13.180s] -- Found sensor_msgs: 2.2.4 (/opt/ros/galactic/share/sensor_msgs/cmake)
[14.248s] -- Found visualization_msgs: 2.2.4 (/opt/ros/galactic/share/visualization_msgs/cmake)
[15.074s] -- Found std_srvs: 2.2.4 (/opt/ros/galactic/share/std_srvs/cmake)
[15.282s] -- Found ament_lint_auto: 0.10.7 (/opt/ros/galactic/share/ament_lint_auto/cmake)
[16.232s] -- Added test 'copyright' to check source files copyright and LICENSE
[16.243s] -- Added test 'cppcheck' to perform static code analysis on C / C++ code
[16.246s] -- Configured cppcheck include dirs: /home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src
[16.247s] -- Configured cppcheck exclude dirs and/or files: 
[16.257s] -- Added test 'cpplint' to check C / C++ code against the Google style
[16.258s] -- Configured cpplint exclude dirs and/or files: 
[16.263s] -- Added test 'flake8' to check Python code syntax and style conventions
[16.268s] -- Added test 'lint_cmake' to check CMake code style
[16.273s] -- Added test 'pep257' to check Python code against some of the style conventions in PEP 257
[16.284s] -- Added test 'uncrustify' to check C / C++ code style
[16.285s] -- Configured uncrustify additional arguments: 
[16.290s] -- Added test 'xmllint' to check XML markup files
[16.309s] -- Configuring done
[16.380s] -- Generating done
[16.423s] -- Build files have been written to: /home/jetson/mecanum-ros2/build/ydlidar_ros2_driver
[16.496s] Invoked command in '/home/jetson/mecanum-ros2/build/ydlidar_ros2_driver' returned '0': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/jetson/mecanum-ros2/install/teleop_keyboard:/home/jetson/mecanum-ros2/install/motor_control:/home/jetson/mecanum-ros2/install/mobile_description:/home/jetson/mecanum-ros2/install/mecanum_odometry:/home/jetson/mecanum-ros2/install/mecanum_cartographer:/home/jetson/mecanum-ros2/install/manipulator:/opt/ros/galactic /usr/bin/cmake /home/jetson/mecanum-ros2/src/ydlidar_ros2_driver -DCMAKE_INSTALL_PREFIX=/home/jetson/mecanum-ros2/install/ydlidar_ros2_driver
[16.500s] Invoking command in '/home/jetson/mecanum-ros2/build/ydlidar_ros2_driver': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/jetson/mecanum-ros2/install/teleop_keyboard:/home/jetson/mecanum-ros2/install/motor_control:/home/jetson/mecanum-ros2/install/mobile_description:/home/jetson/mecanum-ros2/install/mecanum_odometry:/home/jetson/mecanum-ros2/install/mecanum_cartographer:/home/jetson/mecanum-ros2/install/manipulator:/opt/ros/galactic /usr/bin/cmake --build /home/jetson/mecanum-ros2/build/ydlidar_ros2_driver -- -j4 -l4
[16.921s] [35m[1mScanning dependencies of target ydlidar_ros2_driver_client[0m
[16.973s] [35m[1mScanning dependencies of target ydlidar_ros2_driver_node[0m
[17.295s] [ 25%] [32mBuilding CXX object CMakeFiles/ydlidar_ros2_driver_client.dir/src/ydlidar_ros2_driver_client.cpp.o[0m
[17.325s] [ 50%] [32mBuilding CXX object CMakeFiles/ydlidar_ros2_driver_node.dir/src/ydlidar_ros2_driver_node.cpp.o[0m
[25.787s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In function â€˜[01m[Kint main(int, char**)[m[Kâ€™:
[25.787s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:44:33:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[25.788s] If you want to declare a parameter that won't change type without a default value use:
[25.788s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[25.789s] 
[25.790s] If you want to declare a parameter that can dynamically change type use:
[25.790s] ```
[25.791s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[25.791s] descriptor.dynamic_typing = true;
[25.792s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[25.792s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[25.793s]    node->declare_parameter("port"[01;35m[K)[m[K;
[25.793s]                                  [01;35m[K^[m[K
[25.806s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[25.806s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[25.807s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[25.807s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[25.808s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[25.808s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[25.809s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[25.809s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:51:41:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[25.810s] If you want to declare a parameter that won't change type without a default value use:
[25.810s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[25.811s] 
[25.812s] If you want to declare a parameter that can dynamically change type use:
[25.812s] ```
[25.813s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[25.813s] descriptor.dynamic_typing = true;
[25.814s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[25.814s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[25.821s]    node->declare_parameter("ignore_array"[01;35m[K)[m[K;
[25.834s]                                          [01;35m[K^[m[K
[25.835s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[25.835s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[25.836s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[25.836s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[25.837s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[25.837s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[25.837s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[25.838s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:56:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[25.839s] If you want to declare a parameter that won't change type without a default value use:
[25.839s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[25.839s] 
[25.840s] If you want to declare a parameter that can dynamically change type use:
[25.840s] ```
[25.841s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[25.841s] descriptor.dynamic_typing = true;
[25.842s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[25.842s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[25.843s]    node->declare_parameter("frame_id"[01;35m[K)[m[K;
[25.843s]                                      [01;35m[K^[m[K
[25.844s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[25.844s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[25.845s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[25.845s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[25.846s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[25.858s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[25.859s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[25.859s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:62:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[25.860s] If you want to declare a parameter that won't change type without a default value use:
[25.860s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[25.861s] 
[25.861s] If you want to declare a parameter that can dynamically change type use:
[25.862s] ```
[25.862s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[25.863s] descriptor.dynamic_typing = true;
[25.863s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[25.864s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[25.864s]    node->declare_parameter("baudrate"[01;35m[K)[m[K;
[25.865s]                                      [01;35m[K^[m[K
[25.865s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[25.866s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[25.866s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[25.867s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[25.867s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[25.868s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[25.868s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[25.869s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:67:39:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[25.869s] If you want to declare a parameter that won't change type without a default value use:
[25.874s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[25.876s] 
[25.876s] If you want to declare a parameter that can dynamically change type use:
[25.877s] ```
[25.877s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[25.878s] descriptor.dynamic_typing = true;
[25.878s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[25.879s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[25.879s]    node->declare_parameter("lidar_type"[01;35m[K)[m[K;
[25.879s]                                        [01;35m[K^[m[K
[25.880s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[25.880s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[25.881s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[25.881s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[25.882s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[25.882s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[25.883s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[25.883s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:72:40:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[25.884s] If you want to declare a parameter that won't change type without a default value use:
[25.884s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[25.884s] 
[25.885s] If you want to declare a parameter that can dynamically change type use:
[25.885s] ```
[25.897s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[25.897s] descriptor.dynamic_typing = true;
[25.898s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[25.898s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[25.899s]    node->declare_parameter("device_type"[01;35m[K)[m[K;
[25.899s]                                         [01;35m[K^[m[K
[25.900s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[25.900s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[25.901s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[25.901s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[25.902s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[25.903s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[25.903s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[25.904s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:77:40:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[25.904s] If you want to declare a parameter that won't change type without a default value use:
[25.905s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[25.905s] 
[25.905s] If you want to declare a parameter that can dynamically change type use:
[25.917s] ```
[25.917s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[25.918s] descriptor.dynamic_typing = true;
[25.918s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[25.919s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[25.919s]    node->declare_parameter("sample_rate"[01;35m[K)[m[K;
[25.920s]                                         [01;35m[K^[m[K
[25.920s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[25.921s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[25.921s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[25.922s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[25.922s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[25.923s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[25.923s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[25.924s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:82:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[25.924s] If you want to declare a parameter that won't change type without a default value use:
[25.925s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[25.925s] 
[25.926s] If you want to declare a parameter that can dynamically change type use:
[25.934s] ```
[25.935s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[25.935s] descriptor.dynamic_typing = true;
[25.936s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[25.936s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[25.937s]    node->declare_parameter("abnormal_check_count"[01;35m[K)[m[K;
[25.937s]                                                  [01;35m[K^[m[K
[25.938s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[25.939s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[25.939s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[25.940s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[25.940s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[25.940s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[25.941s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[25.941s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:90:45:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[25.955s] If you want to declare a parameter that won't change type without a default value use:
[25.955s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[25.956s] 
[25.956s] If you want to declare a parameter that can dynamically change type use:
[25.957s] ```
[25.957s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[25.958s] descriptor.dynamic_typing = true;
[25.959s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[25.959s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[25.960s]    node->declare_parameter("fixed_resolution"[01;35m[K)[m[K;
[25.960s]                                              [01;35m[K^[m[K
[25.961s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[25.961s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[25.962s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[25.962s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[25.963s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[25.964s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[25.964s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[25.964s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:95:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[25.965s] If you want to declare a parameter that won't change type without a default value use:
[25.965s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[25.977s] 
[25.979s] If you want to declare a parameter that can dynamically change type use:
[25.979s] ```
[25.980s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[25.980s] descriptor.dynamic_typing = true;
[25.981s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[25.981s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[25.982s]    node->declare_parameter("reversion"[01;35m[K)[m[K;
[25.983s]                                       [01;35m[K^[m[K
[25.983s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[25.984s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[25.984s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[25.985s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[25.985s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[25.986s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[25.994s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[25.995s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:100:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[25.995s] If you want to declare a parameter that won't change type without a default value use:
[25.996s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[25.996s] 
[25.997s] If you want to declare a parameter that can dynamically change type use:
[25.997s] ```
[25.998s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[25.998s] descriptor.dynamic_typing = true;
[25.999s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[25.999s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[26.000s]    node->declare_parameter("inverted"[01;35m[K)[m[K;
[26.000s]                                      [01;35m[K^[m[K
[26.001s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[26.001s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[26.014s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[26.016s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[26.017s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[26.017s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[26.018s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[26.018s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:104:43:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[26.019s] If you want to declare a parameter that won't change type without a default value use:
[26.019s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[26.020s] 
[26.020s] If you want to declare a parameter that can dynamically change type use:
[26.021s] ```
[26.021s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[26.022s] descriptor.dynamic_typing = true;
[26.022s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[26.022s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[26.023s]    node->declare_parameter("auto_reconnect"[01;35m[K)[m[K;
[26.023s]                                            [01;35m[K^[m[K
[26.023s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[26.024s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[26.024s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[26.025s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[26.025s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[26.025s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[26.038s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[26.038s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:109:44:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[26.039s] If you want to declare a parameter that won't change type without a default value use:
[26.039s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[26.040s] 
[26.040s] If you want to declare a parameter that can dynamically change type use:
[26.041s] ```
[26.041s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[26.041s] descriptor.dynamic_typing = true;
[26.042s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[26.042s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[26.042s]    node->declare_parameter("isSingleChannel"[01;35m[K)[m[K;
[26.043s]                                             [01;35m[K^[m[K
[26.043s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[26.043s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[26.044s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[26.044s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[26.045s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[26.045s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[26.045s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[26.046s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:114:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[26.046s] If you want to declare a parameter that won't change type without a default value use:
[26.047s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[26.047s] 
[26.047s] If you want to declare a parameter that can dynamically change type use:
[26.048s] ```
[26.048s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[26.049s] descriptor.dynamic_typing = true;
[26.049s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[26.049s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[26.053s]    node->declare_parameter("intensity"[01;35m[K)[m[K;
[26.063s]                                       [01;35m[K^[m[K
[26.063s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[26.064s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[26.064s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[26.065s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[26.065s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[26.066s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[26.066s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[26.067s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:119:46:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[26.067s] If you want to declare a parameter that won't change type without a default value use:
[26.068s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[26.068s] 
[26.069s] If you want to declare a parameter that can dynamically change type use:
[26.069s] ```
[26.070s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[26.070s] descriptor.dynamic_typing = true;
[26.071s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[26.071s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[26.071s]    node->declare_parameter("support_motor_dtr"[01;35m[K)[m[K;
[26.072s]                                               [01;35m[K^[m[K
[26.072s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[26.073s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[26.073s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[26.074s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[26.082s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[26.083s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[26.084s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[26.084s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:126:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[26.085s] If you want to declare a parameter that won't change type without a default value use:
[26.085s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[26.098s] 
[26.099s] If you want to declare a parameter that can dynamically change type use:
[26.099s] ```
[26.100s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[26.100s] descriptor.dynamic_typing = true;
[26.101s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[26.101s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[26.102s]    node->declare_parameter("angle_max"[01;35m[K)[m[K;
[26.102s]                                       [01;35m[K^[m[K
[26.103s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[26.103s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[26.104s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[26.104s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[26.105s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[26.105s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[26.106s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[26.106s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:130:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[26.107s] If you want to declare a parameter that won't change type without a default value use:
[26.107s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[26.108s] 
[26.108s] If you want to declare a parameter that can dynamically change type use:
[26.109s] ```
[26.109s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[26.122s] descriptor.dynamic_typing = true;
[26.122s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[26.123s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[26.123s]    node->declare_parameter("angle_min"[01;35m[K)[m[K;
[26.124s]                                       [01;35m[K^[m[K
[26.124s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[26.125s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[26.125s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[26.126s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[26.126s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[26.127s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[26.127s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[26.128s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:135:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[26.128s] If you want to declare a parameter that won't change type without a default value use:
[26.128s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[26.129s] 
[26.129s] If you want to declare a parameter that can dynamically change type use:
[26.130s] ```
[26.130s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[26.131s] descriptor.dynamic_typing = true;
[26.131s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[26.132s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[26.132s]    node->declare_parameter("range_max"[01;35m[K)[m[K;
[26.133s]                                       [01;35m[K^[m[K
[26.133s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[26.134s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[26.146s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[26.147s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[26.147s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[26.148s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[26.148s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[26.149s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:139:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[26.149s] If you want to declare a parameter that won't change type without a default value use:
[26.149s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[26.150s] 
[26.150s] If you want to declare a parameter that can dynamically change type use:
[26.151s] ```
[26.151s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[26.152s] descriptor.dynamic_typing = true;
[26.152s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[26.153s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[26.153s]    node->declare_parameter("range_min"[01;35m[K)[m[K;
[26.153s]                                       [01;35m[K^[m[K
[26.154s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[26.154s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[26.155s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[26.155s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[26.156s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[26.156s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[26.157s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[26.157s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:144:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[26.157s] If you want to declare a parameter that won't change type without a default value use:
[26.170s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[26.171s] 
[26.171s] If you want to declare a parameter that can dynamically change type use:
[26.172s] ```
[26.172s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[26.173s] descriptor.dynamic_typing = true;
[26.173s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[26.174s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[26.174s]    node->declare_parameter("frequency"[01;35m[K)[m[K;
[26.175s]                                       [01;35m[K^[m[K
[26.175s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[26.176s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[26.176s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[26.176s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[26.177s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[26.177s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[26.178s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[26.178s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:149:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.
[26.179s] If you want to declare a parameter that won't change type without a default value use:
[26.179s] `node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.
[26.180s] 
[26.180s] If you want to declare a parameter that can dynamically change type use:
[26.180s] ```
[26.181s] rcl_interfaces::msg::ParameterDescriptor descriptor;
[26.181s] descriptor.dynamic_typing = true;
[26.182s] node->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);
[26.182s] ``` [[01;35m[K-Wdeprecated-declarations[m[K]
[26.183s]    node->declare_parameter("invalid_range_is_inf"[01;35m[K)[m[K;
[26.184s]                                                  [01;35m[K^[m[K
[26.184s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[26.184s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[26.185s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[26.185s]                  from [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[26.202s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[26.203s]    [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[26.203s]    [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[26.204s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In lambda function:
[26.204s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:163:54:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Krequest_header[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[26.204s]      [&laser]([01;35m[Kconst std::shared_ptr<rmw_request_id_t> request_header[m[K,
[26.205s]               [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~[m[K
[26.205s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:164:56:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kreq[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[26.206s]    [01;35m[Kconst std::shared_ptr<std_srvs::srv::Empty::Request> req[m[K,
[26.206s]    [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~[m[K
[26.207s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:165:51:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kresponse[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[26.207s]    [01;35m[Kstd::shared_ptr<std_srvs::srv::Empty::Response> response[m[K) -> bool
[26.208s]    [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~[m[K
[26.208s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In lambda function:
[26.209s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:173:54:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Krequest_header[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[26.209s]      [&laser]([01;35m[Kconst std::shared_ptr<rmw_request_id_t> request_header[m[K,
[26.210s]               [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~[m[K
[26.210s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:174:56:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kreq[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[26.211s]    [01;35m[Kconst std::shared_ptr<std_srvs::srv::Empty::Request> req[m[K,
[26.211s]    [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~[m[K
[26.212s] [01m[K/home/jetson/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:175:51:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kresponse[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[26.212s]    [01;35m[Kstd::shared_ptr<std_srvs::srv::Empty::Response> response[m[K) -> bool
[26.213s]    [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~[m[K
[36.551s] [ 75%] [32m[1mLinking CXX executable ydlidar_ros2_driver_node[0m
[38.150s] [ 75%] Built target ydlidar_ros2_driver_node
[45.508s] [100%] [32m[1mLinking CXX executable ydlidar_ros2_driver_client[0m
[46.946s] [100%] Built target ydlidar_ros2_driver_client
[46.986s] Invoked command in '/home/jetson/mecanum-ros2/build/ydlidar_ros2_driver' returned '0': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/jetson/mecanum-ros2/install/teleop_keyboard:/home/jetson/mecanum-ros2/install/motor_control:/home/jetson/mecanum-ros2/install/mobile_description:/home/jetson/mecanum-ros2/install/mecanum_odometry:/home/jetson/mecanum-ros2/install/mecanum_cartographer:/home/jetson/mecanum-ros2/install/manipulator:/opt/ros/galactic /usr/bin/cmake --build /home/jetson/mecanum-ros2/build/ydlidar_ros2_driver -- -j4 -l4
[47.087s] Invoking command in '/home/jetson/mecanum-ros2/build/ydlidar_ros2_driver': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/jetson/mecanum-ros2/install/teleop_keyboard:/home/jetson/mecanum-ros2/install/motor_control:/home/jetson/mecanum-ros2/install/mobile_description:/home/jetson/mecanum-ros2/install/mecanum_odometry:/home/jetson/mecanum-ros2/install/mecanum_cartographer:/home/jetson/mecanum-ros2/install/manipulator:/opt/ros/galactic /usr/bin/cmake --install /home/jetson/mecanum-ros2/build/ydlidar_ros2_driver
[47.125s] -- Install configuration: ""
[47.125s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/lib/ydlidar_ros2_driver/ydlidar_ros2_driver_node
[47.133s] -- Set runtime path of "/home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/lib/ydlidar_ros2_driver/ydlidar_ros2_driver_node" to ""
[47.134s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/lib/ydlidar_ros2_driver/ydlidar_ros2_driver_client
[47.145s] -- Set runtime path of "/home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/lib/ydlidar_ros2_driver/ydlidar_ros2_driver_client" to ""
[47.145s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/launch
[47.146s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/launch/ydlidar.py
[47.150s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/launch/ydlidar_launch.py
[47.151s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/launch/ydlidar_launch_view.py
[47.152s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/params
[47.153s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/params/ydlidar.yaml
[47.154s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/startup
[47.154s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/startup/initenv.sh
[47.155s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/config
[47.155s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/config/ydlidar.rviz
[47.156s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ament_index/resource_index/package_run_dependencies/ydlidar_ros2_driver
[47.157s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ament_index/resource_index/parent_prefix_path/ydlidar_ros2_driver
[47.158s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/environment/ament_prefix_path.sh
[47.159s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/environment/ament_prefix_path.dsv
[47.159s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/environment/path.sh
[47.160s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/environment/path.dsv
[47.160s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/local_setup.bash
[47.161s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/local_setup.sh
[47.162s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/local_setup.zsh
[47.162s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/local_setup.dsv
[47.163s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/package.dsv
[47.164s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ament_index/resource_index/packages/ydlidar_ros2_driver
[47.165s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/cmake/ydlidar_ros2_driverConfig.cmake
[47.165s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/cmake/ydlidar_ros2_driverConfig-version.cmake
[47.166s] -- Installing: /home/jetson/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/package.xml
[47.180s] Invoked command in '/home/jetson/mecanum-ros2/build/ydlidar_ros2_driver' returned '0': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/jetson/mecanum-ros2/install/teleop_keyboard:/home/jetson/mecanum-ros2/install/motor_control:/home/jetson/mecanum-ros2/install/mobile_description:/home/jetson/mecanum-ros2/install/mecanum_odometry:/home/jetson/mecanum-ros2/install/mecanum_cartographer:/home/jetson/mecanum-ros2/install/manipulator:/opt/ros/galactic /usr/bin/cmake --install /home/jetson/mecanum-ros2/build/ydlidar_ros2_driver
