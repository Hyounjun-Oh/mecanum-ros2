[1.039s] Invoking command in '/home/ohj/mecanum-ros2/build/ydlidar_ros2_driver': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/ohj/navigation2/install/nav2_simple_commander:/home/ohj/navigation2/install/nav2_gazebo_spawner:/home/ohj/mecanum-ros2/install/tomato_detection:/home/ohj/mecanum-ros2/install/teleop_keyboard:/home/ohj/mecanum-ros2/install/motor_control:/home/ohj/mecanum-ros2/install/mobile_description:/home/ohj/mecanum-ros2/install/mecanum_odometry:/home/ohj/mecanum-ros2/install/mecanum_cartographer:/home/ohj/mecanum-ros2/install/manipulator:/opt/ros/galactic /home/ohj/.local/bin/cmake /home/ohj/mecanum-ros2/src/ydlidar_ros2_driver -DCMAKE_INSTALL_PREFIX=/home/ohj/mecanum-ros2/install/ydlidar_ros2_driver
[1.117s] -- The C compiler identification is GNU 9.4.0
[1.200s] -- The CXX compiler identification is GNU 9.4.0
[1.214s] -- Detecting C compiler ABI info
[1.292s] -- Detecting C compiler ABI info - done
[1.310s] -- Check for working C compiler: /usr/bin/cc - skipped
[1.310s] -- Detecting C compile features
[1.311s] -- Detecting C compile features - done
[1.316s] -- Detecting CXX compiler ABI info
[1.405s] -- Detecting CXX compiler ABI info - done
[1.422s] -- Check for working CXX compiler: /usr/bin/c++ - skipped
[1.423s] -- Detecting CXX compile features
[1.424s] -- Detecting CXX compile features - done
[1.431s] -- Found ament_cmake: 1.1.6 (/opt/ros/galactic/share/ament_cmake/cmake)
[1.475s] -- Found PythonInterp: /usr/bin/python3 (found suitable version "3.8.10", minimum required is "3") 
[1.475s] -- Using PYTHON_EXECUTABLE: /usr/bin/python3
[1.610s] -- Found rclcpp: 9.2.2 (/opt/ros/galactic/share/rclcpp/cmake)
[1.724s] -- Using all available rosidl_typesupport_c: rosidl_typesupport_fastrtps_c;rosidl_typesupport_introspection_c
[1.745s] -- Found rosidl_adapter: 2.2.3 (/opt/ros/galactic/share/rosidl_adapter/cmake)
[1.875s] -- Found OpenSSL: /usr/lib/x86_64-linux-gnu/libcrypto.so (found version "1.1.1f")  
[1.925s] -- Found FastRTPS: /opt/ros/galactic/include  
[2.017s] -- Using all available rosidl_typesupport_cpp: rosidl_typesupport_fastrtps_cpp;rosidl_typesupport_introspection_cpp
[2.084s] -- Found rmw_implementation_cmake: 3.3.1 (/opt/ros/galactic/share/rmw_implementation_cmake/cmake)
[2.089s] -- Found rmw_cyclonedds_cpp: 0.22.6 (/opt/ros/galactic/share/rmw_cyclonedds_cpp/cmake)
[2.108s] -- Using RMW implementation 'rmw_cyclonedds_cpp' as default
[2.109s] -- Performing Test CMAKE_HAVE_LIBC_PTHREAD
[2.164s] -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed
[2.164s] -- Looking for pthread_create in pthreads
[2.212s] -- Looking for pthread_create in pthreads - not found
[2.212s] -- Looking for pthread_create in pthread
[2.261s] -- Looking for pthread_create in pthread - found
[2.263s] -- Found Threads: TRUE  
[2.406s] -- Found sensor_msgs: 2.2.4 (/opt/ros/galactic/share/sensor_msgs/cmake)
[2.496s] -- Found visualization_msgs: 2.2.4 (/opt/ros/galactic/share/visualization_msgs/cmake)
[2.559s] -- Found std_srvs: 2.2.4 (/opt/ros/galactic/share/std_srvs/cmake)
[2.585s] -- Found ament_lint_auto: 0.10.7 (/opt/ros/galactic/share/ament_lint_auto/cmake)
[2.665s] -- Added test 'copyright' to check source files copyright and LICENSE
[2.667s] -- Added test 'cppcheck' to perform static code analysis on C / C++ code
[2.667s] -- Configured cppcheck include dirs: /home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src
[2.667s] -- Configured cppcheck exclude dirs and/or files: 
[2.669s] -- Added test 'cpplint' to check C / C++ code against the Google style
[2.669s] -- Configured cpplint exclude dirs and/or files: 
[2.669s] -- Added test 'flake8' to check Python code syntax and style conventions
[2.670s] -- Added test 'lint_cmake' to check CMake code style
[2.672s] -- Added test 'pep257' to check Python code against some of the style conventions in PEP 257
[2.673s] -- Added test 'uncrustify' to check C / C++ code style
[2.674s] -- Configured uncrustify additional arguments: 
[2.675s] -- Added test 'xmllint' to check XML markup files
[2.677s] -- Configuring done (1.6s)
[2.688s] -- Generating done (0.0s)
[2.689s] -- Build files have been written to: /home/ohj/mecanum-ros2/build/ydlidar_ros2_driver
[2.699s] Invoked command in '/home/ohj/mecanum-ros2/build/ydlidar_ros2_driver' returned '0': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/ohj/navigation2/install/nav2_simple_commander:/home/ohj/navigation2/install/nav2_gazebo_spawner:/home/ohj/mecanum-ros2/install/tomato_detection:/home/ohj/mecanum-ros2/install/teleop_keyboard:/home/ohj/mecanum-ros2/install/motor_control:/home/ohj/mecanum-ros2/install/mobile_description:/home/ohj/mecanum-ros2/install/mecanum_odometry:/home/ohj/mecanum-ros2/install/mecanum_cartographer:/home/ohj/mecanum-ros2/install/manipulator:/opt/ros/galactic /home/ohj/.local/bin/cmake /home/ohj/mecanum-ros2/src/ydlidar_ros2_driver -DCMAKE_INSTALL_PREFIX=/home/ohj/mecanum-ros2/install/ydlidar_ros2_driver
[2.700s] Invoking command in '/home/ohj/mecanum-ros2/build/ydlidar_ros2_driver': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/ohj/navigation2/install/nav2_simple_commander:/home/ohj/navigation2/install/nav2_gazebo_spawner:/home/ohj/mecanum-ros2/install/tomato_detection:/home/ohj/mecanum-ros2/install/teleop_keyboard:/home/ohj/mecanum-ros2/install/motor_control:/home/ohj/mecanum-ros2/install/mobile_description:/home/ohj/mecanum-ros2/install/mecanum_odometry:/home/ohj/mecanum-ros2/install/mecanum_cartographer:/home/ohj/mecanum-ros2/install/manipulator:/opt/ros/galactic /home/ohj/.local/bin/cmake --build /home/ohj/mecanum-ros2/build/ydlidar_ros2_driver -- -j20 -l20
[2.750s] [ 50%] [32mBuilding CXX object CMakeFiles/ydlidar_ros2_driver_client.dir/src/ydlidar_ros2_driver_client.cpp.o[0m
[2.750s] [ 50%] [32mBuilding CXX object CMakeFiles/ydlidar_ros2_driver_node.dir/src/ydlidar_ros2_driver_node.cpp.o[0m
[4.084s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In function â€˜[01m[Kint main(int, char**)[m[Kâ€™:
[4.084s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:44:33:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.085s]    44 |   node->declare_parameter("port"[01;35m[K)[m[K;
[4.085s]       |                                 [01;35m[K^[m[K
[4.085s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.085s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.085s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.085s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.085s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.085s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.085s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.085s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:51:41:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.086s]    51 |   node->declare_parameter("ignore_array"[01;35m[K)[m[K;
[4.086s]       |                                         [01;35m[K^[m[K
[4.086s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.086s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.086s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.087s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.087s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.087s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.087s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.087s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:56:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.087s]    56 |   node->declare_parameter("frame_id"[01;35m[K)[m[K;
[4.087s]       |                                     [01;35m[K^[m[K
[4.087s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.087s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.087s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.087s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.087s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.087s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.088s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.088s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:62:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.088s]    62 |   node->declare_parameter("baudrate"[01;35m[K)[m[K;
[4.088s]       |                                     [01;35m[K^[m[K
[4.088s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.088s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.088s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.088s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.088s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.088s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.088s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.088s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:67:39:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.088s]    67 |   node->declare_parameter("lidar_type"[01;35m[K)[m[K;
[4.089s]       |                                       [01;35m[K^[m[K
[4.089s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.089s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.089s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.089s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.089s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.089s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.089s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.089s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:72:40:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.089s]    72 |   node->declare_parameter("device_type"[01;35m[K)[m[K;
[4.089s]       |                                        [01;35m[K^[m[K
[4.089s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.089s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.090s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.090s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.090s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.090s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.090s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.090s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:77:40:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.090s]    77 |   node->declare_parameter("sample_rate"[01;35m[K)[m[K;
[4.090s]       |                                        [01;35m[K^[m[K
[4.090s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.090s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.090s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.090s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.090s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.090s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.091s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.091s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:82:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.091s]    82 |   node->declare_parameter("abnormal_check_count"[01;35m[K)[m[K;
[4.091s]       |                                                 [01;35m[K^[m[K
[4.091s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.091s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.091s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.091s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.091s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.091s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.092s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.092s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:90:45:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.092s]    90 |   node->declare_parameter("fixed_resolution"[01;35m[K)[m[K;
[4.092s]       |                                             [01;35m[K^[m[K
[4.092s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.092s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.092s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.092s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.092s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.092s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.092s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.092s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:95:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.092s]    95 |   node->declare_parameter("reversion"[01;35m[K)[m[K;
[4.093s]       |                                      [01;35m[K^[m[K
[4.093s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.093s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.093s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.093s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.093s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.093s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.093s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.093s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:100:37:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.093s]   100 |   node->declare_parameter("inverted"[01;35m[K)[m[K;
[4.093s]       |                                     [01;35m[K^[m[K
[4.093s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.093s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.093s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.094s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.094s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.094s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.094s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.094s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:104:43:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.094s]   104 |   node->declare_parameter("auto_reconnect"[01;35m[K)[m[K;
[4.094s]       |                                           [01;35m[K^[m[K
[4.094s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.094s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.094s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.094s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.094s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.095s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.095s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.095s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:109:44:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.095s]   109 |   node->declare_parameter("isSingleChannel"[01;35m[K)[m[K;
[4.095s]       |                                            [01;35m[K^[m[K
[4.095s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.095s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.095s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.095s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.095s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.095s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.095s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.095s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:114:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.095s]   114 |   node->declare_parameter("intensity"[01;35m[K)[m[K;
[4.096s]       |                                      [01;35m[K^[m[K
[4.096s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.096s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.096s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.096s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.096s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.096s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.096s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.096s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:119:46:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.096s]   119 |   node->declare_parameter("support_motor_dtr"[01;35m[K)[m[K;
[4.096s]       |                                              [01;35m[K^[m[K
[4.096s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.096s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.096s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.097s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.097s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.097s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.097s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.097s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:126:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.097s]   126 |   node->declare_parameter("angle_max"[01;35m[K)[m[K;
[4.097s]       |                                      [01;35m[K^[m[K
[4.097s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.097s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.097s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.097s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.097s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.097s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.097s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.098s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:130:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.098s]   130 |   node->declare_parameter("angle_min"[01;35m[K)[m[K;
[4.098s]       |                                      [01;35m[K^[m[K
[4.098s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.098s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.098s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.098s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.098s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.098s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.098s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.098s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:135:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.098s]   135 |   node->declare_parameter("range_max"[01;35m[K)[m[K;
[4.098s]       |                                      [01;35m[K^[m[K
[4.098s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.098s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.099s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.099s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.099s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.099s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.099s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.099s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:139:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.099s]   139 |   node->declare_parameter("range_min"[01;35m[K)[m[K;
[4.099s]       |                                      [01;35m[K^[m[K
[4.099s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.099s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.099s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.099s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.099s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.100s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.100s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.100s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:144:38:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.100s]   144 |   node->declare_parameter("frequency"[01;35m[K)[m[K;
[4.100s]       |                                      [01;35m[K^[m[K
[4.100s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.100s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.100s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.100s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.100s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.100s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.100s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.100s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:149:49:[m[K [01;35m[Kwarning: [m[Kâ€˜[01m[Kconst rclcpp::ParameterValue& rclcpp::Node::declare_parameter(const string&)[m[Kâ€™ is deprecated: declare_parameter() with only a name is deprecated and will be deleted in the future.\nIf you want to declare a parameter that won't change type without a default value use:\n`node->declare_parameter<ParameterT>(name)`, where e.g. ParameterT=int64_t.\n\nIf you want to declare a parameter that can dynamically change type use:\n```\nrcl_interfaces::msg::ParameterDescriptor descriptor;\ndescriptor.dynamic_typing = true;\nnode->declare_parameter(name, rclcpp::ParameterValue{}, descriptor);\n``` [[01;35m[K-Wdeprecated-declarations[m[K]
[4.100s]   149 |   node->declare_parameter("invalid_range_is_inf"[01;35m[K)[m[K;
[4.101s]       |                                                 [01;35m[K^[m[K
[4.101s] In file included from [01m[K/opt/ros/galactic/include/rclcpp/executors/single_threaded_executor.hpp:28[m[K,
[4.101s]                  from [01m[K/opt/ros/galactic/include/rclcpp/executors.hpp:22[m[K,
[4.101s]                  from [01m[K/opt/ros/galactic/include/rclcpp/rclcpp.hpp:156[m[K,
[4.101s]                  from [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:23[m[K:
[4.101s] [01m[K/opt/ros/galactic/include/rclcpp/node.hpp:422:3:[m[K [01;36m[Knote: [m[Kdeclared here
[4.101s]   422 |   [01;36m[Kdeclare_parameter[m[K(const std::string & name);
[4.101s]       |   [01;36m[K^~~~~~~~~~~~~~~~~[m[K
[4.101s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In lambda function:
[4.101s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:163:54:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Krequest_header[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[4.101s]   163 |     [&laser]([01;35m[Kconst std::shared_ptr<rmw_request_id_t> request_header[m[K,
[4.101s]       |              [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~[m[K
[4.101s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:164:56:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kreq[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[4.101s]   164 |   [01;35m[Kconst std::shared_ptr<std_srvs::srv::Empty::Request> req[m[K,
[4.101s]       |   [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~[m[K
[4.102s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:165:51:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kresponse[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[4.102s]   165 |   [01;35m[Kstd::shared_ptr<std_srvs::srv::Empty::Response> response[m[K) -> bool
[4.102s]       |   [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~[m[K
[4.102s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:[m[K In lambda function:
[4.102s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:173:54:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Krequest_header[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[4.102s]   173 |     [&laser]([01;35m[Kconst std::shared_ptr<rmw_request_id_t> request_header[m[K,
[4.102s]       |              [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~[m[K
[4.102s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:174:56:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kreq[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[4.102s]   174 |   [01;35m[Kconst std::shared_ptr<std_srvs::srv::Empty::Request> req[m[K,
[4.102s]       |   [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~[m[K
[4.102s] [01m[K/home/ohj/mecanum-ros2/src/ydlidar_ros2_driver/src/ydlidar_ros2_driver_node.cpp:175:51:[m[K [01;35m[Kwarning: [m[Kunused parameter â€˜[01m[Kresponse[m[Kâ€™ [[01;35m[K-Wunused-parameter[m[K]
[4.102s]   175 |   [01;35m[Kstd::shared_ptr<std_srvs::srv::Empty::Response> response[m[K) -> bool
[4.102s]       |   [01;35m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~[m[K
[5.843s] [ 75%] [32m[1mLinking CXX executable ydlidar_ros2_driver_node[0m
[6.042s] [ 75%] Built target ydlidar_ros2_driver_node
[7.505s] [100%] [32m[1mLinking CXX executable ydlidar_ros2_driver_client[0m
[7.680s] [100%] Built target ydlidar_ros2_driver_client
[7.687s] Invoked command in '/home/ohj/mecanum-ros2/build/ydlidar_ros2_driver' returned '0': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/ohj/navigation2/install/nav2_simple_commander:/home/ohj/navigation2/install/nav2_gazebo_spawner:/home/ohj/mecanum-ros2/install/tomato_detection:/home/ohj/mecanum-ros2/install/teleop_keyboard:/home/ohj/mecanum-ros2/install/motor_control:/home/ohj/mecanum-ros2/install/mobile_description:/home/ohj/mecanum-ros2/install/mecanum_odometry:/home/ohj/mecanum-ros2/install/mecanum_cartographer:/home/ohj/mecanum-ros2/install/manipulator:/opt/ros/galactic /home/ohj/.local/bin/cmake --build /home/ohj/mecanum-ros2/build/ydlidar_ros2_driver -- -j20 -l20
[7.731s] Invoking command in '/home/ohj/mecanum-ros2/build/ydlidar_ros2_driver': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/ohj/navigation2/install/nav2_simple_commander:/home/ohj/navigation2/install/nav2_gazebo_spawner:/home/ohj/mecanum-ros2/install/tomato_detection:/home/ohj/mecanum-ros2/install/teleop_keyboard:/home/ohj/mecanum-ros2/install/motor_control:/home/ohj/mecanum-ros2/install/mobile_description:/home/ohj/mecanum-ros2/install/mecanum_odometry:/home/ohj/mecanum-ros2/install/mecanum_cartographer:/home/ohj/mecanum-ros2/install/manipulator:/opt/ros/galactic /home/ohj/.local/bin/cmake --install /home/ohj/mecanum-ros2/build/ydlidar_ros2_driver
[7.753s] -- Install configuration: ""
[7.753s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/lib/ydlidar_ros2_driver/ydlidar_ros2_driver_node
[7.754s] -- Set runtime path of "/home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/lib/ydlidar_ros2_driver/ydlidar_ros2_driver_node" to ""
[7.754s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/lib/ydlidar_ros2_driver/ydlidar_ros2_driver_client
[7.755s] -- Set runtime path of "/home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/lib/ydlidar_ros2_driver/ydlidar_ros2_driver_client" to ""
[7.755s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/launch
[7.755s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/launch/ydlidar_launch.py
[7.755s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/launch/ydlidar_launch_view.py
[7.756s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/launch/ydlidar.py
[7.756s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/params
[7.756s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/params/ydlidar.yaml
[7.756s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/startup
[7.756s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/startup/initenv.sh
[7.756s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/config
[7.756s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/config/ydlidar.rviz
[7.756s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ament_index/resource_index/package_run_dependencies/ydlidar_ros2_driver
[7.756s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ament_index/resource_index/parent_prefix_path/ydlidar_ros2_driver
[7.756s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/environment/ament_prefix_path.sh
[7.757s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/environment/ament_prefix_path.dsv
[7.757s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/environment/path.sh
[7.757s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/environment/path.dsv
[7.757s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/local_setup.bash
[7.757s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/local_setup.sh
[7.757s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/local_setup.zsh
[7.757s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/local_setup.dsv
[7.757s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/package.dsv
[7.757s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ament_index/resource_index/packages/ydlidar_ros2_driver
[7.757s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/cmake/ydlidar_ros2_driverConfig.cmake
[7.757s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/cmake/ydlidar_ros2_driverConfig-version.cmake
[7.757s] -- Installing: /home/ohj/mecanum-ros2/install/ydlidar_ros2_driver/share/ydlidar_ros2_driver/package.xml
[7.761s] Invoked command in '/home/ohj/mecanum-ros2/build/ydlidar_ros2_driver' returned '0': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/home/ohj/navigation2/install/nav2_simple_commander:/home/ohj/navigation2/install/nav2_gazebo_spawner:/home/ohj/mecanum-ros2/install/tomato_detection:/home/ohj/mecanum-ros2/install/teleop_keyboard:/home/ohj/mecanum-ros2/install/motor_control:/home/ohj/mecanum-ros2/install/mobile_description:/home/ohj/mecanum-ros2/install/mecanum_odometry:/home/ohj/mecanum-ros2/install/mecanum_cartographer:/home/ohj/mecanum-ros2/install/manipulator:/opt/ros/galactic /home/ohj/.local/bin/cmake --install /home/ohj/mecanum-ros2/build/ydlidar_ros2_driver
